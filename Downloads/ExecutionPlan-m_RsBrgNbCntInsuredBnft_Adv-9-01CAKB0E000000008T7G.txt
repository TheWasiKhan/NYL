[{"name":"InfaSpark0","content":"package com.informatica.exec\n\nimport com.informatica.bootstrap.functions._\nimport com.informatica.bootstrap.InfaParams._\nimport com.informatica.products.infatransform.spark.boot._\nimport com.informatica.bootstrap._\nimport com.informatica.hive._\nimport com.informatica.bootstrap.{JsonProtocol \u003d\u003e JP}\nimport org.apache.spark._\nimport org.apache.spark.rdd._\nimport org.apache.spark.storage.StorageLevel._\nimport org.apache.spark.sql._\nimport org.apache.spark.sql.types._\nimport org.apache.spark.sql.functions._\nimport org.apache.spark.sql.functions.{ broadcast \u003d\u003e infabroadcast }\nimport org.apache.spark.sql.infa.expressions._\nimport java.io._\nimport scala.reflect.ClassTag\nimport org.apache.spark.sql.catalyst.expressions.Caster\nimport org.apache.spark.sql.catalyst.expressions.JavaCaster\nimport com.informatica.bootstrap.JavaTx._\nimport org.apache.spark.sql.infafunctions._\nimport com.informatica.bootstrap.parser.functions._\n\nobject InfaSpark0 {\n  def main(s:Array[String]) {\n    val params \u003d new InfaParams(\"InfaSpark0\", \"MM/DD/YYYY HH24:MI:SS\")\n    val sc \u003d SparkContextLoader.getSparkContext\n    val sqlContext \u003d SparkContextLoader.getSQLContext\n    val ls \u003d null\n    import sqlContext.implicits._\n    val icast \u003d caster(\"MM/DD/YYYY HH24:MI:SS\")\n    val acast \u003d adapterCaster()\n    val jcast \u003d JavaCaster()\n    val hcast \u003d caster(\"YYYY-MM-DD HH24:MI:SS.NS\")\n\n    sqlContext.setConf(\"infaspark.shuffle.max.partitions\", \"10000\")\n\n    val preJobs \u003d () \u003d\u003e {\n      runUserDefinedJob(\"\", \"method\", \"\", \"com.informatica.cci.runtime.adapterutils.CCITaskUtils\", \"invocationMethod\", List(\"pretask\", \"package-AmazonRedshiftV2.46000501.light.zip\", \"/package/redshift/thirdparty\"), List(params.extern(1)), Map(Tuple2(\"LD_LIBRARY_PATH\", \"$PATH\")), sc)\n      runUserDefinedJob(\"\", \"method\", \"\", \"com.informatica.cci.runtime.adapterutils.CCITaskUtils\", \"invocationMethod\", List(\"pretask\", \"package-AmazonRedshiftV2.46000501.light.zip\", \"/package/redshift/thirdparty\"), List(params.extern(2)), Map(Tuple2(\"LD_LIBRARY_PATH\", \"$PATH\")), sc)\n      runUserDefinedJob(\"\", \"method\", \"\", \"com.informatica.cci.runtime.adapterutils.CCITaskUtils\", \"invocationMethod\", List(\"pretask\", \"package-AmazonRedshiftV2.46000501.light.zip\", \"/package/redshift/thirdparty\"), List(params.extern(3)), Map(Tuple2(\"LD_LIBRARY_PATH\", \"$PATH\")), sc)\n      runUserDefinedJob(\"\", \"method\", \"\", \"com.informatica.cci.runtime.adapterutils.CCITaskUtils\", \"invocationMethod\", List(\"pretask\", \"package-AmazonRedshiftV2.46000501.light.zip\", \"/package/redshift/thirdparty\"), List(params.extern(4)), Map(Tuple2(\"LD_LIBRARY_PATH\", \"$PATH\")), sc)\n      runUserDefinedJob(\"\", \"method\", \"\", \"com.informatica.cci.runtime.adapterutils.CCITaskUtils\", \"invocationMethod\", List(\"pretask\", \"package-AmazonRedshiftV2.46000501.light.zip\", \"/package/redshift/thirdparty\"), List(params.extern(5)), Map(Tuple2(\"LD_LIBRARY_PATH\", \"$PATH\")), sc)\n      runUserDefinedJob(\"\", \"method\", \"\", \"com.informatica.cci.runtime.adapterutils.CCITaskUtils\", \"invocationMethod\", List(\"pretask\", \"package-AmazonRedshiftV2.46000501.light.zip\", \"/package/redshift/thirdparty\"), List(params.extern(6)), Map(Tuple2(\"LD_LIBRARY_PATH\", \"$PATH\")), sc)\n      runUserDefinedJob(\"\", \"method\", \"\", \"com.informatica.cci.runtime.adapterutils.CCITaskUtils\", \"invocationMethod\", List(\"pretask\", \"package-AmazonRedshiftV2.46000501.light.zip\", \"/package/redshift/thirdparty\"), List(params.extern(7)), Map(Tuple2(\"LD_LIBRARY_PATH\", \"$PATH\")), sc)\n      runUserDefinedJob(\"\", \"method\", \"\", \"com.informatica.cci.runtime.adapterutils.CCITaskUtils\", \"invocationMethod\", List(\"pretask\", \"package-AmazonRedshiftV2.46000501.light.zip\", \"/package/redshift/thirdparty\"), List(params.extern(8)), Map(Tuple2(\"LD_LIBRARY_PATH\", \"$PATH\")), sc)\n      runUserDefinedJob(\"\", \"method\", \"\", \"com.informatica.cci.runtime.adapterutils.CCITaskUtils\", \"invocationMethod\", List(\"pretask\", \"package-AmazonRedshiftV2.46000501.light.zip\", \"/package/redshift/thirdparty\"), List(params.extern(9)), Map(Tuple2(\"LD_LIBRARY_PATH\", \"$PATH\")), sc)\n      runUserDefinedJob(\"\", \"method\", \"\", \"com.informatica.cci.runtime.adapterutils.CCITaskUtils\", \"invocationMethod\", List(\"pretask\", \"package-AmazonRedshiftV2.46000501.light.zip\", \"/package/redshift/thirdparty\"), List(params.extern(10)), Map(Tuple2(\"LD_LIBRARY_PATH\", \"$PATH\")), sc)\n      runUserDefinedJob(\"\", \"method\", \"\", \"com.informatica.cci.runtime.adapterutils.CCITaskUtils\", \"invocationMethod\", List(\"pretask\", \"package-AmazonRedshiftV2.46000501.light.zip\", \"/package/redshift/thirdparty\"), List(params.extern(11)), Map(Tuple2(\"LD_LIBRARY_PATH\", \"$PATH\")), sc)\n      runUserDefinedJob(\"\", \"method\", \"\", \"com.informatica.cci.runtime.adapterutils.CCITaskUtils\", \"invocationMethod\", List(\"pretask\", \"package-AmazonRedshiftV2.46000501.light.zip\", \"/package/redshift/thirdparty\"), List(params.extern(12)), Map(Tuple2(\"LD_LIBRARY_PATH\", \"$PATH\")), sc)\n      runUserDefinedJob(\"\", \"method\", \"\", \"com.informatica.cci.runtime.adapterutils.CCITaskUtils\", \"invocationMethod\", List(\"pretask\", \"package-AmazonRedshiftV2.46000501.light.zip\", \"/package/redshift/thirdparty\"), List(params.extern(13)), Map(Tuple2(\"LD_LIBRARY_PATH\", \"$PATH\")), sc)\n      runUserDefinedJob(\"\", \"method\", \"\", \"com.informatica.cci.runtime.adapterutils.CCITaskUtils\", \"invocationMethod\", List(\"pretask\", \"package-AmazonRedshiftV2.46000501.light.zip\", \"/package/redshift/thirdparty\"), List(params.extern(14)), Map(Tuple2(\"LD_LIBRARY_PATH\", \"$PATH\")), sc)\n      runUserDefinedJob(\"\", \"method\", \"\", \"com.informatica.cci.runtime.adapterutils.CCITaskUtils\", \"invocationMethod\", List(\"pretask\", \"package-AmazonRedshiftV2.46000501.light.zip\", \"/package/redshift/thirdparty\"), List(params.extern(15)), Map(Tuple2(\"LD_LIBRARY_PATH\", \"$PATH\")), sc)\n      runUserDefinedJob(\"\", \"method\", \"\", \"com.informatica.cci.runtime.adapterutils.CCITaskUtils\", \"invocationMethod\", List(\"pretask\", \"package-AmazonRedshiftV2.46000501.light.zip\", \"/package/redshift/thirdparty\"), List(params.extern(16)), Map(Tuple2(\"LD_LIBRARY_PATH\", \"$PATH\")), sc)\n      runUserDefinedJob(\"\", \"method\", \"\", \"com.informatica.cci.runtime.adapterutils.CCITaskUtils\", \"invocationMethod\", List(\"pretask\", \"package-AmazonRedshiftV2.46000501.light.zip\", \"/package/redshift/thirdparty\"), List(params.extern(17)), Map(Tuple2(\"LD_LIBRARY_PATH\", \"$PATH\")), sc)\n      runUserDefinedJob(\"\", \"method\", \"\", \"com.informatica.cci.runtime.adapterutils.CCITaskUtils\", \"invocationMethod\", List(\"pretask\", \"package-AmazonRedshiftV2.46000501.light.zip\", \"/package/redshift/thirdparty\"), List(params.extern(18)), Map(Tuple2(\"LD_LIBRARY_PATH\", \"$PATH\")), sc)\n      runUserDefinedJob(\"\", \"method\", \"\", \"com.informatica.cci.runtime.adapterutils.CCITaskUtils\", \"invocationMethod\", List(\"pretask\", \"package-AmazonRedshiftV2.46000501.light.zip\", \"/package/redshift/thirdparty\"), List(params.extern(19)), Map(Tuple2(\"LD_LIBRARY_PATH\", \"$PATH\")), sc)\n      runUserDefinedJob(\"\", \"method\", \"\", \"com.informatica.cci.runtime.adapterutils.CCITaskUtils\", \"invocationMethod\", List(\"pretask\", \"package-AmazonRedshiftV2.46000501.light.zip\", \"/package/redshift/thirdparty\"), List(params.extern(20)), Map(Tuple2(\"LD_LIBRARY_PATH\", \"$PATH\")), sc)\n    }\n    preJobs()\n\n    val f0:(DataFrame,DataFrame,DataFrame)\u003d\u003eDataFrame \u003d (p1,p3,p2)\u003d\u003e{\n      val v4 \u003d Step(lit(\"Inactive\"));\n      val v5 \u003d Step(icast(lit(10000003), LongType));\n      val v6 \u003d Step(lit(\"Active\"));\n      val v7 \u003d Step(lit(\" \"));\n      val v8 \u003d Step(e_ltrim(e_rtrim(when(upper(p3(88)).\u003d\u003d\u003d(v4.get()).||(p3(61).\u003d\u003d\u003d(v5.get())).||(p3(62).\u003d\u003d\u003d(v5.get())).||(p3(43).\u003d\u003d\u003d(v5.get())).||(p3(42).\u003d\u003d\u003d(v5.get())), v4.get()).otherwise(v6.get()), v7.get()), v7.get()));\n      val v9 \u003d Step(e_ltrim(e_rtrim(p3(49), v7.get()), v7.get()));\n      val v10 \u003d Step(p3(87));\n      val v11 \u003d Step(e_ltrim(e_rtrim(v10.get(), v7.get()), v7.get()));\n      val v12 \u003d Step(e_ltrim(e_rtrim(icast(p3(86), StringType), v7.get()), v7.get()));\n      val v13 \u003d Step(e_ltrim(e_rtrim(p3(65), v7.get()), v7.get()));\n      val v14 \u003d Step(e_ltrim(e_rtrim(p3(64), v7.get()), v7.get()));\n      val v15 \u003d Step(p3(77));\n      val v16 \u003d Step(lit(\"\"));\n      val v17 \u003d Step(lit(\"ECPO\"));\n      val v18 \u003d Step(lit(\"Y\"));\n      val v19 \u003d Step(lit(\"N\"));\n      val v20 \u003d Step(e_ltrim(e_rtrim(when(upper(when(v15.get().isNull, v16.get()).otherwise(v15.get())).\u003d\u003d\u003d(v17.get()), v18.get()).otherwise(v19.get()), v7.get()), v7.get()));\n      val v21 \u003d Step(e_ltrim(e_rtrim(p3(45), v7.get()), v7.get()));\n      val v22 \u003d Step(p3(80));\n      val v23 \u003d Step(lit(\"LEVDOT\"));\n      val v24 \u003d Step(e_ltrim(e_rtrim(when(upper(when(v22.get().isNull, v16.get()).otherwise(v22.get())).\u003d\u003d\u003d(v23.get()), v18.get()).otherwise(v19.get()), v7.get()), v7.get()));\n      val v25 \u003d Step(e_ltrim(e_rtrim(p3(52), v7.get()), v7.get()));\n      val v26 \u003d Step(p3(9));\n      val v27 \u003d Step(lit(\"OPPLUMPSUM\"));\n      val v28 \u003d Step(e_ltrim(e_rtrim(when(upper(when(v26.get().isNull, v16.get()).otherwise(v26.get())).\u003d\u003d\u003d(v27.get()), v18.get()).otherwise(v19.get()), v7.get()), v7.get()));\n      val v29 \u003d Step(e_ltrim(e_rtrim(p3(63), v7.get()), v7.get()));\n      val v30 \u003d Step(e_ltrim(e_rtrim(p3(51), v7.get()), v7.get()));\n      val v31 \u003d Step(p3(7));\n      val v32 \u003d Step(lit(\"EOBNF\"));\n      val v33 \u003d Step(e_ltrim(e_rtrim(when(upper(when(v31.get().isNull, v16.get()).otherwise(v31.get())).\u003d\u003d\u003d(v32.get()), v18.get()).otherwise(v19.get()), v7.get()), v7.get()));\n      val v34 \u003d Step(e_ltrim(e_rtrim(p3(50), v7.get()), v7.get()));\n      val v35 \u003d Step(upper(md5(infaConcat(v8.get(), v9.get(), v11.get(), v12.get(), v13.get(), v14.get(), v20.get(), v21.get(), v24.get(), v25.get(), v28.get(), v29.get(), v30.get(), v33.get(), v34.get()))));\n      val v36 \u003d Step(v35.get().isNull);\n      val v37 \u003d Step(v36.get().\u0026\u0026(v36.get().unary_!));\n      val v38 \u003d Step(lit(1));\n      val v39 \u003d Step(lit(\"D\"));\n      val v40 \u003d Step(lit(2));\n      val v41 \u003d Step(DataTypes.createDecimalType(38, 2));\n      val v42 \u003d Step(DataTypes.createDecimalType(18, 2));\n      val v43 \u003d Step(lit(\"MM/DD/YYYY HH24:MI:SS\"));\n      val v44 \u003d Step(upper(md5(infaConcat(v8.get(), e_ltrim(e_rtrim(p3(57), v7.get()), v7.get()), v9.get(), e_ltrim(e_rtrim(icast(icast(p3(89), LongType), StringType), v7.get()), v7.get()), v12.get(), e_ltrim(e_rtrim(icast(p3(46), StringType), v7.get()), v7.get()), e_ltrim(e_rtrim(v35.get(), v7.get()), v7.get()), e_ltrim(e_rtrim(icast(p3(54), StringType), v7.get()), v7.get()), e_ltrim(e_rtrim(icast(icast(p3(11), IntegerType), StringType), v7.get()), v7.get()), v24.get(), v25.get(), v28.get(), v29.get(), e_ltrim(e_rtrim(icast(icast(p3(16), v41.get()), StringType), v7.get()), v7.get()), e_ltrim(e_rtrim(icast(icast(p3(84), v42.get()), StringType), v7.get()), v7.get()), v33.get(), e_ltrim(e_rtrim(p3(56), v7.get()), v7.get()), v34.get(), e_ltrim(e_rtrim(icast(p3(59), StringType), v7.get()), v7.get()), e_ltrim(e_rtrim(icast(icast(p3(85), v42.get()), StringType), v7.get()), v7.get()), e_ltrim(e_rtrim(icast(p3(48), StringType), v7.get()), v7.get()), e_ltrim(e_rtrim(icast(icast(p3(14), IntegerType), StringType), v7.get()), v7.get()), e_ltrim(e_rtrim(icast(p3(55), StringType), v7.get()), v7.get()), v11.get(), e_ltrim(e_rtrim(icast(icast(p3(71), v41.get()), StringType), v7.get()), v7.get()), e_ltrim(e_rtrim(icast(icast(p3(72), IntegerType), StringType), v7.get()), v7.get()), v13.get(), e_ltrim(e_rtrim(icast(icast(p3(17), IntegerType), StringType), v7.get()), v7.get()), v14.get(), v20.get(), v21.get(), e_ltrim(e_rtrim(icast(icast(p3(73), v41.get()), StringType), v7.get()), v7.get()), e_ltrim(e_rtrim(icast(p3(53), StringType), v7.get()), v7.get()), e_ltrim(e_rtrim(icast(p3(60), StringType), v7.get()), v7.get()), e_ltrim(e_rtrim(icast(icast(p3(13), v41.get()), StringType), v7.get()), v7.get()), e_ltrim(e_rtrim(icast(p3(47), StringType), v7.get()), v7.get()), e_ltrim(e_rtrim(icast(p3(0), StringType), v7.get()), v7.get()), e_ltrim(e_rtrim(p3(58), v7.get()), v7.get()), e_ltrim(e_rtrim(icast(e_to_date(p3(74), v43.get()), StringType), v7.get()), v7.get()), v30.get()))));\n      val v45 \u003d Step(lit(0));\n      val v46 \u003d Step(p3.where(when(v37.get(), v38.get()).otherwise(when(v37.get().\u0026\u0026(v10.get().!\u003d\u003d(v39.get())), v40.get()).otherwise(when(v35.get().\u003d\u003d\u003d(v35.get()).\u0026\u0026(v44.get().!\u003d\u003d(v44.get())), lit(3)).otherwise(v45.get()))).\u003d\u003d\u003d(v40.get())));\n      val v47 \u003d Step(icast(lit(params.str(\"GLOBAL.$JPBATCHKEY\")), LongType));\n      val v48 \u003d Step(v46.get()(77));\n      val v49 \u003d Step(v46.get()(9));\n      val v50 \u003d Step(v46.get()(80));\n      val v51 \u003d Step(v46.get()(7));\n      val v52 \u003d Step(p1.unionAll(p2).unionAll(v46.get().iselect(icast(v46.get()(138), LongType), v47.get(), e_to_date(icast(v46.get()(179), StringType), v43.get()), icast(v46.get()(180), StringType), v47.get(), icast(v46.get()(136), StringType), e_substr2(lit(params.str(\"GLOBAL.$DSJOBNAME\")), v45.get(), lit(50)), icast(v46.get()(71), v41.get()), icast(v46.get()(72), IntegerType), icast(v46.get()(16), v41.get()), icast(v46.get()(17), IntegerType), icast(v46.get()(13), v41.get()), icast(v46.get()(14), IntegerType), icast(v46.get()(73), v41.get()), e_to_date(v46.get()(74), v43.get()), icast(v46.get()(11), IntegerType), icast(v46.get()(84), v42.get()), icast(v46.get()(85), v42.get()), when(upper(v46.get()(88)).\u003d\u003d\u003d(v4.get()).||(v46.get()(61).\u003d\u003d\u003d(v5.get())).||(v46.get()(62).\u003d\u003d\u003d(v5.get())).||(v46.get()(43).\u003d\u003d\u003d(v5.get())).||(v46.get()(42).\u003d\u003d\u003d(v5.get())), v4.get()).otherwise(v6.get()), when(upper(when(v48.get().isNull, v16.get()).otherwise(v48.get())).\u003d\u003d\u003d(v17.get()), v18.get()).otherwise(v19.get()), when(upper(when(v49.get().isNull, v16.get()).otherwise(v49.get())).\u003d\u003d\u003d(v27.get()), v18.get()).otherwise(v19.get()), when(upper(when(v50.get().isNull, v16.get()).otherwise(v50.get())).\u003d\u003d\u003d(v23.get()), v18.get()).otherwise(v19.get()), when(upper(when(v51.get().isNull, v16.get()).otherwise(v51.get())).\u003d\u003d\u003d(v32.get()), v18.get()).otherwise(v19.get()), icast(v46.get()(89), LongType), v46.get()(45), v46.get()(46), v46.get()(47), v46.get()(48), v46.get()(49), v46.get()(50), v46.get()(51), v46.get()(52), v46.get()(53), v46.get()(54), v46.get()(55), v46.get()(56), v46.get()(57), v46.get()(58), v46.get()(59), v46.get()(60), v46.get()(63), v46.get()(64), v46.get()(65), v46.get()(86), v39.get(), v46.get()(0))));\n      val v53 \u003d Step(lit(35));\n      v52.get().iselect(icast(v52.get()(0), LongType), icast(v52.get()(24), StringType), icast(v52.get()(43), LongType), icast(v52.get()(25), IntegerType), icast(v52.get()(27), IntegerType), icast(v52.get()(26), IntegerType), icast(v52.get()(23), LongType), icast(v52.get()(28), StringType), icast(v52.get()(29), StringType), icast(v52.get()(45), LongType), icast(v52.get()(30), StringType), icast(v52.get()(31), StringType), icast(v52.get()(32), IntegerType), icast(v52.get()(33), IntegerType), icast(v52.get()(34), IntegerType), icast(e_substr2(v52.get()(35), v45.get(), v38.get()), StringType), icast(v52.get()(36), StringType), icast(e_substr2(v52.get()(40), v45.get(), v38.get()), StringType), icast(e_substr2(v52.get()(41), v45.get(), v38.get()), StringType), icast(v52.get()(37), StringType), icast(e_substr2(v52.get()(42), v45.get(), v38.get()), StringType), icast(v52.get()(38), IntegerType), icast(v52.get()(39), IntegerType), icast(v52.get()(7), v41.get()), icast(v52.get()(8), IntegerType), e_to_char(icast(v52.get()(14), TimestampType), lit(\"YYYY-MM-DD HH24:MI:SS.US\")), icast(v52.get()(9), v41.get()), icast(v52.get()(10), IntegerType), icast(v52.get()(11), v41.get()), icast(v52.get()(12), IntegerType), icast(v52.get()(13), v41.get()), icast(v52.get()(15), IntegerType), icast(v52.get()(19), StringType), icast(v52.get()(20), StringType), icast(v52.get()(21), StringType), icast(v52.get()(22), StringType), icast(v52.get()(16), v42.get()), icast(v52.get()(17), v42.get()), icast(v52.get()(18), StringType), icast(v52.get()(44), StringType), icast(v52.get()(1), LongType), icast(e_substr2(e_to_char(v52.get()(2), v43.get()), v45.get(), v53.get()), StringType), icast(v52.get()(3), StringType), icast(v52.get()(4), LongType), icast(e_substr2(v52.get()(5), v45.get(), v53.get()), StringType), icast(v52.get()(6), StringType));\n    }\n\n    val f54:(DataFrame,DataFrame)\u003d\u003eUnit \u003d (p55,p56)\u003d\u003e{\n      val v57 \u003d Step(p56.itoDF);\n      val v58 \u003d Step(lit(\"Inactive\"));\n      val v59 \u003d Step(icast(lit(10000003), LongType));\n      val v60 \u003d Step(lit(\"Active\"));\n      val v61 \u003d Step(lit(\" \"));\n      val v62 \u003d Step(e_ltrim(e_rtrim(when(upper(v57.get()(88)).\u003d\u003d\u003d(v58.get()).||(v57.get()(61).\u003d\u003d\u003d(v59.get())).||(v57.get()(62).\u003d\u003d\u003d(v59.get())).||(v57.get()(43).\u003d\u003d\u003d(v59.get())).||(v57.get()(42).\u003d\u003d\u003d(v59.get())), v58.get()).otherwise(v60.get()), v61.get()), v61.get()));\n      val v63 \u003d Step(e_ltrim(e_rtrim(v57.get()(49), v61.get()), v61.get()));\n      val v64 \u003d Step(v57.get()(87));\n      val v65 \u003d Step(e_ltrim(e_rtrim(v64.get(), v61.get()), v61.get()));\n      val v66 \u003d Step(e_ltrim(e_rtrim(icast(v57.get()(86), StringType), v61.get()), v61.get()));\n      val v67 \u003d Step(e_ltrim(e_rtrim(v57.get()(65), v61.get()), v61.get()));\n      val v68 \u003d Step(e_ltrim(e_rtrim(v57.get()(64), v61.get()), v61.get()));\n      val v69 \u003d Step(v57.get()(77));\n      val v70 \u003d Step(lit(\"\"));\n      val v71 \u003d Step(lit(\"ECPO\"));\n      val v72 \u003d Step(lit(\"Y\"));\n      val v73 \u003d Step(lit(\"N\"));\n      val v74 \u003d Step(e_ltrim(e_rtrim(when(upper(when(v69.get().isNull, v70.get()).otherwise(v69.get())).\u003d\u003d\u003d(v71.get()), v72.get()).otherwise(v73.get()), v61.get()), v61.get()));\n      val v75 \u003d Step(e_ltrim(e_rtrim(v57.get()(45), v61.get()), v61.get()));\n      val v76 \u003d Step(v57.get()(80));\n      val v77 \u003d Step(lit(\"LEVDOT\"));\n      val v78 \u003d Step(e_ltrim(e_rtrim(when(upper(when(v76.get().isNull, v70.get()).otherwise(v76.get())).\u003d\u003d\u003d(v77.get()), v72.get()).otherwise(v73.get()), v61.get()), v61.get()));\n      val v79 \u003d Step(e_ltrim(e_rtrim(v57.get()(52), v61.get()), v61.get()));\n      val v80 \u003d Step(v57.get()(9));\n      val v81 \u003d Step(lit(\"OPPLUMPSUM\"));\n      val v82 \u003d Step(e_ltrim(e_rtrim(when(upper(when(v80.get().isNull, v70.get()).otherwise(v80.get())).\u003d\u003d\u003d(v81.get()), v72.get()).otherwise(v73.get()), v61.get()), v61.get()));\n      val v83 \u003d Step(e_ltrim(e_rtrim(v57.get()(63), v61.get()), v61.get()));\n      val v84 \u003d Step(e_ltrim(e_rtrim(v57.get()(51), v61.get()), v61.get()));\n      val v85 \u003d Step(v57.get()(7));\n      val v86 \u003d Step(lit(\"EOBNF\"));\n      val v87 \u003d Step(e_ltrim(e_rtrim(when(upper(when(v85.get().isNull, v70.get()).otherwise(v85.get())).\u003d\u003d\u003d(v86.get()), v72.get()).otherwise(v73.get()), v61.get()), v61.get()));\n      val v88 \u003d Step(e_ltrim(e_rtrim(v57.get()(50), v61.get()), v61.get()));\n      val v89 \u003d Step(upper(md5(infaConcat(v62.get(), v63.get(), v65.get(), v66.get(), v67.get(), v68.get(), v74.get(), v75.get(), v78.get(), v79.get(), v82.get(), v83.get(), v84.get(), v87.get(), v88.get()))));\n      val v90 \u003d Step(v89.get().isNull);\n      val v91 \u003d Step(v90.get().\u0026\u0026(v90.get().unary_!));\n      val v92 \u003d Step(lit(\"D\"));\n      val v93 \u003d Step(DataTypes.createDecimalType(38, 2));\n      val v94 \u003d Step(DataTypes.createDecimalType(18, 2));\n      val v95 \u003d Step(lit(\"MM/DD/YYYY HH24:MI:SS\"));\n      val v96 \u003d Step(upper(md5(infaConcat(v62.get(), e_ltrim(e_rtrim(v57.get()(57), v61.get()), v61.get()), v63.get(), e_ltrim(e_rtrim(icast(icast(v57.get()(89), LongType), StringType), v61.get()), v61.get()), v66.get(), e_ltrim(e_rtrim(icast(v57.get()(46), StringType), v61.get()), v61.get()), e_ltrim(e_rtrim(v89.get(), v61.get()), v61.get()), e_ltrim(e_rtrim(icast(v57.get()(54), StringType), v61.get()), v61.get()), e_ltrim(e_rtrim(icast(icast(v57.get()(11), IntegerType), StringType), v61.get()), v61.get()), v78.get(), v79.get(), v82.get(), v83.get(), e_ltrim(e_rtrim(icast(icast(v57.get()(16), v93.get()), StringType), v61.get()), v61.get()), e_ltrim(e_rtrim(icast(icast(v57.get()(84), v94.get()), StringType), v61.get()), v61.get()), v87.get(), e_ltrim(e_rtrim(v57.get()(56), v61.get()), v61.get()), v88.get(), e_ltrim(e_rtrim(icast(v57.get()(59), StringType), v61.get()), v61.get()), e_ltrim(e_rtrim(icast(icast(v57.get()(85), v94.get()), StringType), v61.get()), v61.get()), e_ltrim(e_rtrim(icast(v57.get()(48), StringType), v61.get()), v61.get()), e_ltrim(e_rtrim(icast(icast(v57.get()(14), IntegerType), StringType), v61.get()), v61.get()), e_ltrim(e_rtrim(icast(v57.get()(55), StringType), v61.get()), v61.get()), v65.get(), e_ltrim(e_rtrim(icast(icast(v57.get()(71), v93.get()), StringType), v61.get()), v61.get()), e_ltrim(e_rtrim(icast(icast(v57.get()(72), IntegerType), StringType), v61.get()), v61.get()), v67.get(), e_ltrim(e_rtrim(icast(icast(v57.get()(17), IntegerType), StringType), v61.get()), v61.get()), v68.get(), v74.get(), v75.get(), e_ltrim(e_rtrim(icast(icast(v57.get()(73), v93.get()), StringType), v61.get()), v61.get()), e_ltrim(e_rtrim(icast(v57.get()(53), StringType), v61.get()), v61.get()), e_ltrim(e_rtrim(icast(v57.get()(60), StringType), v61.get()), v61.get()), e_ltrim(e_rtrim(icast(icast(v57.get()(13), v93.get()), StringType), v61.get()), v61.get()), e_ltrim(e_rtrim(icast(v57.get()(47), StringType), v61.get()), v61.get()), e_ltrim(e_rtrim(icast(v57.get()(0), StringType), v61.get()), v61.get()), e_ltrim(e_rtrim(v57.get()(58), v61.get()), v61.get()), e_ltrim(e_rtrim(icast(e_to_date(v57.get()(74), v95.get()), StringType), v61.get()), v61.get()), v84.get()))));\n      val v97 \u003d Step(lit(3));\n      val v98 \u003d Step(lit(0));\n      val v99 \u003d Step(v57.get().where(when(v91.get(), lit(1)).otherwise(when(v91.get().\u0026\u0026(v64.get().!\u003d\u003d(v92.get())), lit(2)).otherwise(when(v89.get().\u003d\u003d\u003d(v89.get()).\u0026\u0026(v96.get().!\u003d\u003d(v96.get())), v97.get()).otherwise(v98.get()))).\u003d\u003d\u003d(v97.get())));\n      val v100 \u003d Step(icast(lit(params.str(\"GLOBAL.$JPBATCHKEY\")), LongType));\n      val v101 \u003d Step(v99.get()(77));\n      val v102 \u003d Step(v99.get()(9));\n      val v103 \u003d Step(v99.get()(80));\n      val v104 \u003d Step(v99.get()(7));\n      Async()(f0(p55, v57.get(), v99.get().iselect(icast(v99.get()(138), LongType), v100.get(), e_to_date(icast(v99.get()(179), StringType), v95.get()), icast(v99.get()(180), StringType), v100.get(), icast(v99.get()(136), StringType), e_substr2(lit(params.str(\"GLOBAL.$DSJOBNAME\")), v98.get(), lit(50)), icast(v99.get()(71), v93.get()), icast(v99.get()(72), IntegerType), icast(v99.get()(16), v93.get()), icast(v99.get()(17), IntegerType), icast(v99.get()(13), v93.get()), icast(v99.get()(14), IntegerType), icast(v99.get()(73), v93.get()), e_to_date(v99.get()(74), v95.get()), icast(v99.get()(11), IntegerType), icast(v99.get()(84), v94.get()), icast(v99.get()(85), v94.get()), when(upper(v99.get()(88)).\u003d\u003d\u003d(v58.get()).||(v99.get()(61).\u003d\u003d\u003d(v59.get())).||(v99.get()(62).\u003d\u003d\u003d(v59.get())).||(v99.get()(43).\u003d\u003d\u003d(v59.get())).||(v99.get()(42).\u003d\u003d\u003d(v59.get())), v58.get()).otherwise(v60.get()), when(upper(when(v101.get().isNull, v70.get()).otherwise(v101.get())).\u003d\u003d\u003d(v71.get()), v72.get()).otherwise(v73.get()), when(upper(when(v102.get().isNull, v70.get()).otherwise(v102.get())).\u003d\u003d\u003d(v81.get()), v72.get()).otherwise(v73.get()), when(upper(when(v103.get().isNull, v70.get()).otherwise(v103.get())).\u003d\u003d\u003d(v77.get()), v72.get()).otherwise(v73.get()), when(upper(when(v104.get().isNull, v70.get()).otherwise(v104.get())).\u003d\u003d\u003d(v86.get()), v72.get()).otherwise(v73.get()), icast(v99.get()(89), LongType), v99.get()(45), v99.get()(46), v99.get()(47), v99.get()(48), v99.get()(49), v99.get()(50), v99.get()(51), v99.get()(52), v99.get()(53), v99.get()(54), v99.get()(55), v99.get()(56), v99.get()(57), v99.get()(58), v99.get()(59), v99.get()(60), v99.get()(63), v99.get()(64), v99.get()(65), v99.get()(86), v92.get(), v99.get()(0))).toDF(\"brg_nb_cnt_insured_bnft_sk\", \"src_sys_nm_nk\", \"fact_nb_contract_part1_sk\", \"src_cnt_bnft_link_ref_id\", \"src_cnt_rel_ref_id\", \"src_cnt_bnft_ref_id\", \"dim_nb_bene_component_sk\", \"bnft_cmpnt_cd_nk\", \"bnft_tp_cd\", \"dim_nb_plan_benefit_sk\", \"plan_bnft_cd_nk\", \"invest_ctgry_cd\", \"bnft_term_yr_num\", \"bnft_exp_age_num\", \"bnft_rel_to_cnt_num\", \"bnft_commission_ind\", \"paymt_freq_cd\", \"main_bnft_ind\", \"max_prem_guarantee_on_rider_ind\", \"rider_ownr_cd\", \"auto_req_bnft_ind\", \"prem_pay_yr_num\", \"src_nlgprdid_ref_id\", \"cov_apply_amt\", \"cov_apply_unit_num\", \"cov_apply_amt_end_dt\", \"cov_initial_appr_amt\", \"cov_initial_appr_unit_num\", \"cov_rcnt_appr_amt\", \"cov_rcnt_appr_unit_num\", \"initial_term_prem_amt\", \"ccr_mth_bnft\", \"conv_extn_bnft_opt_ind\", \"opp_lump_sum_bnft_opt_ind\", \"levdot_bnft_opt_ind\", \"eob_nonfrftr_bnft_ind\", \"return_prem_pct\", \"return_prem_death_bnft_increase_rate\", \"src_rec_sts_cd\", \"edh_record_status_in\", \"edh_created_batch_key\", \"edh_created_ts\", \"edh_created_nm\", \"edh_updated_batch_key\", \"edh_updated_ts\", \"edh_updated_nm\").write.mode(\"overwrite\").option(\"compression\", \"Gzip\").option(\"quote\", \"\u001f\").option(\"ignoreTrailingWhiteSpace\", false).option(\"escape\", \"\\\\\").option(\"emptyValue\", \"\").option(\"encoding\", \"UTF-8\").option(\"nullValue\", null).option(\"sep\", \"\u001e\").option(\"ignoreLeadingWhiteSpace\", false).option(\"header\", true).csv(\"s3a://nyl-datawarehouse-dev-rs-temp-20230120223907439400000003/rs-idmc-temp/6f443290-5377-4616-a285-bb1c2878913511172262414649558577137441037411873041/UPSERT_pdm_conv.brg_nb_cnt_insured_bnft_\"));\n      Async.flush;\n    }\n\n    val f105:(DataFrame,DataFrame,DataFrame)\u003d\u003eUnit \u003d (p108,p106,p107)\u003d\u003e{\n      val v109 \u003d Step(updatePartitions(p107.itoDF(\"d\"), p108));\n      val v110 \u003d Step(lit(\" \"));\n      val v111 \u003d Step(DataTypes.createDecimalType(38, 2));\n      val v112 \u003d Step(DataTypes.createDecimalType(18, 2));\n      val v113 \u003d Step(lit(\"Inactive\"));\n      val v114 \u003d Step(icast(lit(10000003), LongType));\n      val v115 \u003d Step(v109.get()(77));\n      val v116 \u003d Step(lit(\"\"));\n      val v117 \u003d Step(lit(\"Y\"));\n      val v118 \u003d Step(lit(\"N\"));\n      val v119 \u003d Step(v109.get()(80));\n      val v120 \u003d Step(v109.get()(9));\n      val v121 \u003d Step(v109.get()(7));\n      f54(p106, v109.get().join(p108, md5(infaConcat(e_ltrim(e_rtrim(icast(p108(38), StringType), v110.get()), v110.get()), e_ltrim(e_rtrim(icast(p108(7), StringType), v110.get()), v110.get()), e_ltrim(e_rtrim(icast(p108(16), StringType), v110.get()), v110.get()), e_ltrim(e_rtrim(icast(icast(p108(6), LongType), StringType), v110.get()), v110.get()), e_ltrim(e_rtrim(icast(p108(44), StringType), v110.get()), v110.get()), e_ltrim(e_rtrim(icast(p108(45), StringType), v110.get()), v110.get()), e_ltrim(e_rtrim(icast(icast(p108(2), LongType), StringType), v110.get()), v110.get()), e_ltrim(e_rtrim(icast(icast(p108(40), LongType), StringType), v110.get()), v110.get()), e_ltrim(e_rtrim(icast(icast(p108(3), IntegerType), StringType), v110.get()), v110.get()), e_ltrim(e_rtrim(icast(p108(41), StringType), v110.get()), v110.get()), e_ltrim(e_rtrim(icast(p108(42), StringType), v110.get()), v110.get()), e_ltrim(e_rtrim(icast(icast(p108(0), LongType), StringType), v110.get()), v110.get()), e_ltrim(e_rtrim(icast(icast(p108(13), IntegerType), StringType), v110.get()), v110.get()), e_ltrim(e_rtrim(icast(icast(p108(31), IntegerType), StringType), v110.get()), v110.get()), e_ltrim(e_rtrim(icast(p108(34), StringType), v110.get()), v110.get()), e_ltrim(e_rtrim(icast(p108(11), StringType), v110.get()), v110.get()), e_ltrim(e_rtrim(icast(p108(33), StringType), v110.get()), v110.get()), e_ltrim(e_rtrim(icast(icast(p108(43), LongType), StringType), v110.get()), v110.get()), e_ltrim(e_rtrim(icast(p108(17), StringType), v110.get()), v110.get()), e_ltrim(e_rtrim(icast(icast(p108(26), v111.get()), StringType), v110.get()), v110.get()), e_ltrim(e_rtrim(icast(p108(35), StringType), v110.get()), v110.get()), e_ltrim(e_rtrim(icast(icast(p108(36), v112.get()), StringType), v110.get()), v110.get()), e_ltrim(e_rtrim(icast(p108(15), StringType), v110.get()), v110.get()), e_ltrim(e_rtrim(icast(p108(8), StringType), v110.get()), v110.get()), e_ltrim(e_rtrim(icast(icast(p108(21), IntegerType), StringType), v110.get()), v110.get()), e_ltrim(e_rtrim(icast(icast(p108(37), v112.get()), StringType), v110.get()), v110.get()), e_ltrim(e_rtrim(icast(icast(p108(4), IntegerType), StringType), v110.get()), v110.get()), e_ltrim(e_rtrim(icast(icast(p108(29), IntegerType), StringType), v110.get()), v110.get()), e_ltrim(e_rtrim(icast(icast(p108(14), IntegerType), StringType), v110.get()), v110.get()), e_ltrim(e_rtrim(icast(p108(39), StringType), v110.get()), v110.get()), e_ltrim(e_rtrim(icast(icast(p108(23), v111.get()), StringType), v110.get()), v110.get()), e_ltrim(e_rtrim(icast(icast(p108(24), IntegerType), StringType), v110.get()), v110.get()), e_ltrim(e_rtrim(icast(p108(20), StringType), v110.get()), v110.get()), e_ltrim(e_rtrim(icast(icast(p108(27), IntegerType), StringType), v110.get()), v110.get()), e_ltrim(e_rtrim(icast(p108(18), StringType), v110.get()), v110.get()), e_ltrim(e_rtrim(icast(p108(32), StringType), v110.get()), v110.get()), e_ltrim(e_rtrim(icast(p108(1), StringType), v110.get()), v110.get()), e_ltrim(e_rtrim(icast(icast(p108(30), v111.get()), StringType), v110.get()), v110.get()), e_ltrim(e_rtrim(icast(icast(p108(12), IntegerType), StringType), v110.get()), v110.get()), e_ltrim(e_rtrim(icast(icast(p108(22), IntegerType), StringType), v110.get()), v110.get()), e_ltrim(e_rtrim(icast(icast(p108(28), v111.get()), StringType), v110.get()), v110.get()), e_ltrim(e_rtrim(icast(icast(p108(5), IntegerType), StringType), v110.get()), v110.get()), e_ltrim(e_rtrim(icast(icast(p108(9), LongType), StringType), v110.get()), v110.get()), e_ltrim(e_rtrim(icast(p108(19), StringType), v110.get()), v110.get()), e_ltrim(e_rtrim(icast(p108(10), StringType), v110.get()), v110.get()), e_ltrim(e_rtrim(icast(icast(e_to_date(p108(25), lit(\"YYYY-MM-DD\")), TimestampType), StringType), v110.get()), v110.get()))).\u003d\u003d\u003d(upper(md5(infaConcat(e_ltrim(e_rtrim(when(upper(v109.get()(88)).\u003d\u003d\u003d(v113.get()).||(v109.get()(61).\u003d\u003d\u003d(v114.get())).||(v109.get()(62).\u003d\u003d\u003d(v114.get())).||(v109.get()(43).\u003d\u003d\u003d(v114.get())).||(v109.get()(42).\u003d\u003d\u003d(v114.get())), v113.get()).otherwise(lit(\"Active\")), v110.get()), v110.get()), e_ltrim(e_rtrim(v109.get()(49), v110.get()), v110.get()), e_ltrim(e_rtrim(v109.get()(87), v110.get()), v110.get()), e_ltrim(e_rtrim(icast(v109.get()(86), StringType), v110.get()), v110.get()), e_ltrim(e_rtrim(v109.get()(65), v110.get()), v110.get()), e_ltrim(e_rtrim(v109.get()(64), v110.get()), v110.get()), e_ltrim(e_rtrim(when(upper(when(v115.get().isNull, v116.get()).otherwise(v115.get())).\u003d\u003d\u003d(lit(\"ECPO\")), v117.get()).otherwise(v118.get()), v110.get()), v110.get()), e_ltrim(e_rtrim(v109.get()(45), v110.get()), v110.get()), e_ltrim(e_rtrim(when(upper(when(v119.get().isNull, v116.get()).otherwise(v119.get())).\u003d\u003d\u003d(lit(\"LEVDOT\")), v117.get()).otherwise(v118.get()), v110.get()), v110.get()), e_ltrim(e_rtrim(v109.get()(52), v110.get()), v110.get()), e_ltrim(e_rtrim(when(upper(when(v120.get().isNull, v116.get()).otherwise(v120.get())).\u003d\u003d\u003d(lit(\"OPPLUMPSUM\")), v117.get()).otherwise(v118.get()), v110.get()), v110.get()), e_ltrim(e_rtrim(v109.get()(63), v110.get()), v110.get()), e_ltrim(e_rtrim(v109.get()(51), v110.get()), v110.get()), e_ltrim(e_rtrim(when(upper(when(v121.get().isNull, v116.get()).otherwise(v121.get())).\u003d\u003d\u003d(lit(\"EOBNF\")), v117.get()).otherwise(v118.get()), v110.get()), v110.get()), e_ltrim(e_rtrim(v109.get()(50), v110.get()), v110.get()))))), \"inner\"));\n    }\n\n    val f122:(DataFrame)\u003d\u003eDataFrame \u003d (p123)\u003d\u003e{\n      val v124 \u003d Step(icast(p123(89), LongType));\n      val v125 \u003d Step(p123(84));\n      val v126 \u003d Step(p123(85));\n      val v127 \u003d Step(p123(80));\n      val v128 \u003d Step(p123(77));\n      val v129 \u003d Step(p123(71));\n      val v130 \u003d Step(p123(72));\n      val v131 \u003d Step(p123(73));\n      val v132 \u003d Step(p123(74));\n      val v133 \u003d Step(p123(42));\n      val v134 \u003d Step(p123(43));\n      val v135 \u003d Step(p123(45));\n      val v136 \u003d Step(p123(46));\n      val v137 \u003d Step(p123(47));\n      val v138 \u003d Step(p123(48));\n      val v139 \u003d Step(p123(49));\n      val v140 \u003d Step(p123(50));\n      val v141 \u003d Step(p123(51));\n      val v142 \u003d Step(p123(52));\n      val v143 \u003d Step(p123(53));\n      val v144 \u003d Step(p123(54));\n      val v145 \u003d Step(p123(55));\n      val v146 \u003d Step(p123(56));\n      val v147 \u003d Step(p123(57));\n      val v148 \u003d Step(p123(58));\n      val v149 \u003d Step(p123(59));\n      val v150 \u003d Step(p123(60));\n      val v151 \u003d Step(p123(61));\n      val v152 \u003d Step(p123(62));\n      val v153 \u003d Step(p123(63));\n      val v154 \u003d Step(p123(64));\n      val v155 \u003d Step(p123(65));\n      val v156 \u003d Step(p123(16));\n      val v157 \u003d Step(p123(17));\n      val v158 \u003d Step(p123(13));\n      val v159 \u003d Step(p123(14));\n      val v160 \u003d Step(p123(11));\n      val v161 \u003d Step(p123(9));\n      val v162 \u003d Step(p123(7));\n      val v163 \u003d Step(p123(86));\n      val v164 \u003d Step(p123(87));\n      val v165 \u003d Step(p123(88));\n      val v166 \u003d Step(p123(0));\n      val v167 \u003d Step(DataTypes.createDecimalType(38, 2));\n      val v168 \u003d Step(icast(v129.get(), v167.get()));\n      val v169 \u003d Step(icast(v130.get(), IntegerType));\n      val v170 \u003d Step(icast(v156.get(), v167.get()));\n      val v171 \u003d Step(icast(v157.get(), IntegerType));\n      val v172 \u003d Step(icast(v158.get(), v167.get()));\n      val v173 \u003d Step(icast(v159.get(), IntegerType));\n      val v174 \u003d Step(icast(v131.get(), v167.get()));\n      val v175 \u003d Step(e_to_date(v132.get(), lit(\"MM/DD/YYYY HH24:MI:SS\")));\n      val v176 \u003d Step(icast(v160.get(), IntegerType));\n      val v177 \u003d Step(DataTypes.createDecimalType(18, 2));\n      val v178 \u003d Step(icast(v125.get(), v177.get()));\n      val v179 \u003d Step(icast(v126.get(), v177.get()));\n      val v180 \u003d Step(lit(\"Inactive\"));\n      val v181 \u003d Step(icast(lit(10000003), LongType));\n      val v182 \u003d Step(when(upper(v165.get()).\u003d\u003d\u003d(v180.get()).||(v151.get().\u003d\u003d\u003d(v181.get())).||(v152.get().\u003d\u003d\u003d(v181.get())).||(v134.get().\u003d\u003d\u003d(v181.get())).||(v133.get().\u003d\u003d\u003d(v181.get())), v180.get()).otherwise(lit(\"Active\")));\n      val v183 \u003d Step(lit(\"\"));\n      val v184 \u003d Step(lit(\"Y\"));\n      val v185 \u003d Step(lit(\"N\"));\n      val v186 \u003d Step(when(upper(when(v128.get().isNull, v183.get()).otherwise(v128.get())).\u003d\u003d\u003d(lit(\"ECPO\")), v184.get()).otherwise(v185.get()));\n      val v187 \u003d Step(when(upper(when(v161.get().isNull, v183.get()).otherwise(v161.get())).\u003d\u003d\u003d(lit(\"OPPLUMPSUM\")), v184.get()).otherwise(v185.get()));\n      val v188 \u003d Step(when(upper(when(v127.get().isNull, v183.get()).otherwise(v127.get())).\u003d\u003d\u003d(lit(\"LEVDOT\")), v184.get()).otherwise(v185.get()));\n      val v189 \u003d Step(when(upper(when(v162.get().isNull, v183.get()).otherwise(v162.get())).\u003d\u003d\u003d(lit(\"EOBNF\")), v184.get()).otherwise(v185.get()));\n      val v190 \u003d Step(lit(\" \"));\n      val v191 \u003d Step(e_ltrim(e_rtrim(v182.get(), v190.get()), v190.get()));\n      val v192 \u003d Step(e_ltrim(e_rtrim(v139.get(), v190.get()), v190.get()));\n      val v193 \u003d Step(e_ltrim(e_rtrim(v164.get(), v190.get()), v190.get()));\n      val v194 \u003d Step(icast(v163.get(), StringType));\n      val v195 \u003d Step(e_ltrim(e_rtrim(v194.get(), v190.get()), v190.get()));\n      val v196 \u003d Step(e_ltrim(e_rtrim(v155.get(), v190.get()), v190.get()));\n      val v197 \u003d Step(e_ltrim(e_rtrim(v154.get(), v190.get()), v190.get()));\n      val v198 \u003d Step(e_ltrim(e_rtrim(v186.get(), v190.get()), v190.get()));\n      val v199 \u003d Step(e_ltrim(e_rtrim(v135.get(), v190.get()), v190.get()));\n      val v200 \u003d Step(e_ltrim(e_rtrim(v188.get(), v190.get()), v190.get()));\n      val v201 \u003d Step(e_ltrim(e_rtrim(v142.get(), v190.get()), v190.get()));\n      val v202 \u003d Step(e_ltrim(e_rtrim(v187.get(), v190.get()), v190.get()));\n      val v203 \u003d Step(e_ltrim(e_rtrim(v153.get(), v190.get()), v190.get()));\n      val v204 \u003d Step(e_ltrim(e_rtrim(v141.get(), v190.get()), v190.get()));\n      val v205 \u003d Step(e_ltrim(e_rtrim(v189.get(), v190.get()), v190.get()));\n      val v206 \u003d Step(e_ltrim(e_rtrim(v140.get(), v190.get()), v190.get()));\n      val v207 \u003d Step(upper(md5(infaConcat(v191.get(), v192.get(), v193.get(), v195.get(), v196.get(), v197.get(), v198.get(), v199.get(), v200.get(), v201.get(), v202.get(), v203.get(), v204.get(), v205.get(), v206.get()))));\n      val v208 \u003d Step(lit(params.str(\"GLOBAL.$JPBATCHKEY\")));\n      val v209 \u003d Step(lit(0));\n      val v210 \u003d Step(lit(255));\n      val v211 \u003d Step(e_substr2(lit(params.str(\"GLOBAL.$JPTABLENAME\")), v209.get(), v210.get()));\n      val v212 \u003d Step(lit(\",\"));\n      val v213 \u003d Step(lit(null));\n      val v214 \u003d Step(icast(v136.get(), StringType));\n      val v215 \u003d Step(icast(v138.get(), StringType));\n      val v216 \u003d Step(icast(v137.get(), StringType));\n      val v217 \u003d Step(when(v199.get().isNull, v183.get()));\n      val v218 \u003d Step(v195.get().isNull);\n      val v219 \u003d Step(e_ltrim(e_rtrim(v214.get(), v190.get()), v190.get()));\n      val v220 \u003d Step(when(v219.get().isNull, v183.get()));\n      val v221 \u003d Step(e_ltrim(e_rtrim(v215.get(), v190.get()), v190.get()));\n      val v222 \u003d Step(when(v221.get().isNull, v183.get()));\n      val v223 \u003d Step(e_ltrim(e_rtrim(v216.get(), v190.get()), v190.get()));\n      val v224 \u003d Step(when(v223.get().isNull, v183.get()));\n      val v225 \u003d Step(when(v204.get().isNull, v183.get()));\n      val v226 \u003d Step(icast(infaConcat(v217.get().otherwise(v135.get()), icast(when(v218.get(), v213.get()).otherwise(v163.get()), StringType), v220.get().otherwise(v214.get()), v222.get().otherwise(v215.get()), v224.get().otherwise(v216.get()), v225.get().otherwise(v141.get())), IntegerType).\u003d\u003d\u003d(v209.get()));\n      val v227 \u003d Step(lit(\"B\"));\n      val v228 \u003d Step(infaConcat(v217.get().otherwise(e_rtrim(e_ltrim(v135.get(), v190.get()), v227.get())), when(v218.get(), v183.get()).otherwise(e_rtrim(e_ltrim(v194.get(), v190.get()), v227.get())), v220.get().otherwise(e_rtrim(e_ltrim(v214.get(), v190.get()), v227.get())), v222.get().otherwise(e_rtrim(e_ltrim(v215.get(), v190.get()), v227.get())), v224.get().otherwise(e_rtrim(e_ltrim(v216.get(), v190.get()), v227.get())), v225.get().otherwise(e_rtrim(e_ltrim(v141.get(), v190.get()), v227.get()))));\n      val v229 \u003d Step(lit(1));\n      val v230 \u003d Step(when(v228.get().\u003d\u003d\u003d(v228.get()), v209.get()).otherwise(v229.get()).\u003d\u003d\u003d(v209.get()));\n      val v231 \u003d Step(upper(md5(infaConcat(v191.get(), e_ltrim(e_rtrim(v147.get(), v190.get()), v190.get()), v192.get(), e_ltrim(e_rtrim(icast(v124.get(), StringType), v190.get()), v190.get()), v195.get(), v219.get(), e_ltrim(e_rtrim(v207.get(), v190.get()), v190.get()), e_ltrim(e_rtrim(icast(v144.get(), StringType), v190.get()), v190.get()), e_ltrim(e_rtrim(icast(v176.get(), StringType), v190.get()), v190.get()), v200.get(), v201.get(), v202.get(), v203.get(), e_ltrim(e_rtrim(icast(v170.get(), StringType), v190.get()), v190.get()), e_ltrim(e_rtrim(icast(v178.get(), StringType), v190.get()), v190.get()), v205.get(), e_ltrim(e_rtrim(v146.get(), v190.get()), v190.get()), v206.get(), e_ltrim(e_rtrim(icast(v149.get(), StringType), v190.get()), v190.get()), e_ltrim(e_rtrim(icast(v179.get(), StringType), v190.get()), v190.get()), v221.get(), e_ltrim(e_rtrim(icast(v173.get(), StringType), v190.get()), v190.get()), e_ltrim(e_rtrim(icast(v145.get(), StringType), v190.get()), v190.get()), v193.get(), e_ltrim(e_rtrim(icast(v168.get(), StringType), v190.get()), v190.get()), e_ltrim(e_rtrim(icast(v169.get(), StringType), v190.get()), v190.get()), v196.get(), e_ltrim(e_rtrim(icast(v171.get(), StringType), v190.get()), v190.get()), v197.get(), v198.get(), v199.get(), e_ltrim(e_rtrim(icast(v174.get(), StringType), v190.get()), v190.get()), e_ltrim(e_rtrim(icast(v143.get(), StringType), v190.get()), v190.get()), e_ltrim(e_rtrim(icast(v150.get(), StringType), v190.get()), v190.get()), e_ltrim(e_rtrim(icast(v172.get(), StringType), v190.get()), v190.get()), v223.get(), e_ltrim(e_rtrim(icast(v166.get(), StringType), v190.get()), v190.get()), e_ltrim(e_rtrim(v148.get(), v190.get()), v190.get()), e_ltrim(e_rtrim(icast(v175.get(), StringType), v190.get()), v190.get()), v204.get()))));\n      val v232 \u003d Step(v207.get().isNull);\n      val v233 \u003d Step(v232.get().\u0026\u0026(v232.get().unary_!));\n      val v234 \u003d Step(p123(138));\n      val v235 \u003d Step(icast(lit(params.str(\"GLOBAL.$JPMAXSK\")), LongType, true));\n      val v236 \u003d Step(v235.get().+(v234.get()));\n      val v237 \u003d Step(icast(v208.get(), LongType, true));\n      val v238 \u003d Step(lit(params.str(\"GLOBAL.$CURRENTMAPPINGNAME\")));\n      val v239 \u003d Step(icast(v213.get(), StringType));\n      p123.iselectlist(List(icast(p123(136), StringType), v124.get(), v125.get(), v126.get(), v127.get(), v128.get(), v129.get(), v130.get(), v131.get(), v132.get(), p123(18), p123(19), p123(20), p123(21), p123(22), p123(23), p123(24), p123(25), p123(26), p123(27), p123(28), p123(29), p123(30), p123(31), p123(32), p123(33), p123(34), p123(35), p123(36), p123(37), p123(38), p123(39), p123(40), p123(41), v133.get(), v134.get(), p123(44), v135.get(), v136.get(), v137.get(), v138.get(), v139.get(), v140.get(), v141.get(), v142.get(), v143.get(), v144.get(), v145.get(), v146.get(), v147.get(), v148.get(), v149.get(), v150.get(), v151.get(), v152.get(), v153.get(), v154.get(), v155.get(), v156.get(), v157.get(), v158.get(), v159.get(), v160.get(), v161.get(), v162.get(), v163.get(), v164.get(), v165.get(), v166.get(), v168.get(), v169.get(), v170.get(), v171.get(), v172.get(), v173.get(), v174.get(), v175.get(), v176.get(), v178.get(), v179.get(), v182.get(), v186.get(), v187.get(), v188.get(), v189.get(), v207.get(), icast(v208.get(), LongType), lit(\"fact_contract_part1,cntr_ben_link,cntr_ben_link,cntr_ben_link,contract_benefit\"), lit(\"fact_contract_part1_sk,cnbnlkid_ref,conrelid_ref,conbenid_ref,plbenfid_code\"), v211.get(), lit(\"src_sys_nm_nk,fact_nb_contract_part1_sk,src_cnt_bnft_link_ref_id,src_cnt_rel_ref_id,src_cnt_bnft_ref_id,plan_bnft_cd_nk\"), infaConcat(e_ltrim(e_rtrim(when(v135.get().isNull, v183.get()).otherwise(v135.get()), v190.get()), v190.get()), v212.get(), e_ltrim(e_rtrim(icast(when(v163.get().isNull, v213.get()).otherwise(v163.get()), StringType), v190.get()), v190.get()), v212.get(), e_ltrim(e_rtrim(when(v136.get().isNull, v183.get()).otherwise(v214.get()), v190.get()), v190.get()), e_ltrim(e_rtrim(when(v138.get().isNull, v183.get()).otherwise(v215.get()), v190.get()), v190.get()), v212.get(), e_ltrim(e_rtrim(when(v137.get().isNull, v183.get()).otherwise(v216.get()), v190.get()), v190.get()), v212.get(), e_ltrim(e_rtrim(when(v141.get().isNull, v183.get()).otherwise(v141.get()), v190.get()), v190.get())), lit(params.date(\"GLOBAL.$SESSSTARTTIME\")), e_substr2(lit(params.str(\"GLOBAL.$DSJOBNAME\")), v209.get(), v210.get()), when(v226.get(), lit(\"NK NULL CHECK\")).otherwise(when(v230.get(), lit(\"NK DUPLICATE CHECK\")).otherwise(v183.get())), when(v226.get(), lit(\"Natural keys are having NULL\")).otherwise(when(v230.get(), lit(\"OnlythelatestrecordloadedtoTargettable\")).otherwise(v183.get())), when(v226.get(), lit(\"REJECT\")).otherwise(when(v230.get(), lit(\"REJECT DUPLICATE\")).otherwise(v183.get())), v231.get(), when(v233.get(), v229.get()).otherwise(when(v233.get().\u0026\u0026(v164.get().!\u003d\u003d(lit(\"D\"))), lit(2)).otherwise(when(v207.get().\u003d\u003d\u003d(v207.get()).\u0026\u0026(v231.get().!\u003d\u003d(v231.get())), lit(3)).otherwise(v209.get()))), v234.get()).++(List(v236.get(), v237.get(), current_timestamp(), e_substr2(v238.get(), v209.get(), lit(50)), v211.get(), v236.get(), icast(v213.get(), LongType), v239.get(), v239.get(), e_substr2(v238.get(), v209.get(), v210.get()), v235.get(), v237.get()))).repartition(1);\n    }\n\n    val f240:(DataFrame)\u003d\u003eDataFrame \u003d (p241)\u003d\u003e{\n      val v242 \u003d Step(lit(\"Inactive\"));\n      val v243 \u003d Step(icast(lit(10000003), LongType));\n      val v244 \u003d Step(lit(\" \"));\n      val v245 \u003d Step(e_ltrim(e_rtrim(when(upper(p241(88)).\u003d\u003d\u003d(v242.get()).||(p241(61).\u003d\u003d\u003d(v243.get())).||(p241(62).\u003d\u003d\u003d(v243.get())).||(p241(43).\u003d\u003d\u003d(v243.get())).||(p241(42).\u003d\u003d\u003d(v243.get())), v242.get()).otherwise(lit(\"Active\")), v244.get()), v244.get()));\n      val v246 \u003d Step(e_ltrim(e_rtrim(p241(49), v244.get()), v244.get()));\n      val v247 \u003d Step(p241(87));\n      val v248 \u003d Step(e_ltrim(e_rtrim(v247.get(), v244.get()), v244.get()));\n      val v249 \u003d Step(e_ltrim(e_rtrim(icast(p241(86), StringType), v244.get()), v244.get()));\n      val v250 \u003d Step(e_ltrim(e_rtrim(p241(65), v244.get()), v244.get()));\n      val v251 \u003d Step(e_ltrim(e_rtrim(p241(64), v244.get()), v244.get()));\n      val v252 \u003d Step(p241(77));\n      val v253 \u003d Step(lit(\"\"));\n      val v254 \u003d Step(lit(\"Y\"));\n      val v255 \u003d Step(lit(\"N\"));\n      val v256 \u003d Step(e_ltrim(e_rtrim(when(upper(when(v252.get().isNull, v253.get()).otherwise(v252.get())).\u003d\u003d\u003d(lit(\"ECPO\")), v254.get()).otherwise(v255.get()), v244.get()), v244.get()));\n      val v257 \u003d Step(e_ltrim(e_rtrim(p241(45), v244.get()), v244.get()));\n      val v258 \u003d Step(p241(80));\n      val v259 \u003d Step(e_ltrim(e_rtrim(when(upper(when(v258.get().isNull, v253.get()).otherwise(v258.get())).\u003d\u003d\u003d(lit(\"LEVDOT\")), v254.get()).otherwise(v255.get()), v244.get()), v244.get()));\n      val v260 \u003d Step(e_ltrim(e_rtrim(p241(52), v244.get()), v244.get()));\n      val v261 \u003d Step(p241(9));\n      val v262 \u003d Step(e_ltrim(e_rtrim(when(upper(when(v261.get().isNull, v253.get()).otherwise(v261.get())).\u003d\u003d\u003d(lit(\"OPPLUMPSUM\")), v254.get()).otherwise(v255.get()), v244.get()), v244.get()));\n      val v263 \u003d Step(e_ltrim(e_rtrim(p241(63), v244.get()), v244.get()));\n      val v264 \u003d Step(e_ltrim(e_rtrim(p241(51), v244.get()), v244.get()));\n      val v265 \u003d Step(p241(7));\n      val v266 \u003d Step(e_ltrim(e_rtrim(when(upper(when(v265.get().isNull, v253.get()).otherwise(v265.get())).\u003d\u003d\u003d(lit(\"EOBNF\")), v254.get()).otherwise(v255.get()), v244.get()), v244.get()));\n      val v267 \u003d Step(e_ltrim(e_rtrim(p241(50), v244.get()), v244.get()));\n      val v268 \u003d Step(upper(md5(infaConcat(v245.get(), v246.get(), v248.get(), v249.get(), v250.get(), v251.get(), v256.get(), v257.get(), v259.get(), v260.get(), v262.get(), v263.get(), v264.get(), v266.get(), v267.get()))));\n      val v269 \u003d Step(v268.get().isNull);\n      val v270 \u003d Step(v269.get().\u0026\u0026(v269.get().unary_!));\n      val v271 \u003d Step(lit(1));\n      val v272 \u003d Step(DataTypes.createDecimalType(38, 2));\n      val v273 \u003d Step(DataTypes.createDecimalType(18, 2));\n      val v274 \u003d Step(upper(md5(infaConcat(v245.get(), e_ltrim(e_rtrim(p241(57), v244.get()), v244.get()), v246.get(), e_ltrim(e_rtrim(icast(icast(p241(89), LongType), StringType), v244.get()), v244.get()), v249.get(), e_ltrim(e_rtrim(icast(p241(46), StringType), v244.get()), v244.get()), e_ltrim(e_rtrim(v268.get(), v244.get()), v244.get()), e_ltrim(e_rtrim(icast(p241(54), StringType), v244.get()), v244.get()), e_ltrim(e_rtrim(icast(icast(p241(11), IntegerType), StringType), v244.get()), v244.get()), v259.get(), v260.get(), v262.get(), v263.get(), e_ltrim(e_rtrim(icast(icast(p241(16), v272.get()), StringType), v244.get()), v244.get()), e_ltrim(e_rtrim(icast(icast(p241(84), v273.get()), StringType), v244.get()), v244.get()), v266.get(), e_ltrim(e_rtrim(p241(56), v244.get()), v244.get()), v267.get(), e_ltrim(e_rtrim(icast(p241(59), StringType), v244.get()), v244.get()), e_ltrim(e_rtrim(icast(icast(p241(85), v273.get()), StringType), v244.get()), v244.get()), e_ltrim(e_rtrim(icast(p241(48), StringType), v244.get()), v244.get()), e_ltrim(e_rtrim(icast(icast(p241(14), IntegerType), StringType), v244.get()), v244.get()), e_ltrim(e_rtrim(icast(p241(55), StringType), v244.get()), v244.get()), v248.get(), e_ltrim(e_rtrim(icast(icast(p241(71), v272.get()), StringType), v244.get()), v244.get()), e_ltrim(e_rtrim(icast(icast(p241(72), IntegerType), StringType), v244.get()), v244.get()), v250.get(), e_ltrim(e_rtrim(icast(icast(p241(17), IntegerType), StringType), v244.get()), v244.get()), v251.get(), v256.get(), v257.get(), e_ltrim(e_rtrim(icast(icast(p241(73), v272.get()), StringType), v244.get()), v244.get()), e_ltrim(e_rtrim(icast(p241(53), StringType), v244.get()), v244.get()), e_ltrim(e_rtrim(icast(p241(60), StringType), v244.get()), v244.get()), e_ltrim(e_rtrim(icast(icast(p241(13), v272.get()), StringType), v244.get()), v244.get()), e_ltrim(e_rtrim(icast(p241(47), StringType), v244.get()), v244.get()), e_ltrim(e_rtrim(icast(p241(0), StringType), v244.get()), v244.get()), e_ltrim(e_rtrim(p241(58), v244.get()), v244.get()), e_ltrim(e_rtrim(icast(e_to_date(p241(74), lit(\"MM/DD/YYYY HH24:MI:SS\")), StringType), v244.get()), v244.get()), v264.get()))));\n      val v275 \u003d Step(f122(p241.where(when(v270.get(), v271.get()).otherwise(when(v270.get().\u0026\u0026(v247.get().!\u003d\u003d(lit(\"D\"))), lit(2)).otherwise(when(v268.get().\u003d\u003d\u003d(v268.get()).\u0026\u0026(v274.get().!\u003d\u003d(v274.get())), lit(3)).otherwise(lit(0)))).!\u003d\u003d(v271.get()))).transform(infaTransform(params.extern(0), ParseType[StructType](\"{SLd1802d1802SSd1802Ld1802SLLSLLLLSSSSLLLSSSSSSLLLLLLISLLLSSSSLLLSSSLLLLSSSd1802Ld1802LLSSLSSLd3802Id3802Id3802Id3802TId1802d1802SSSSSSLSSSSSTSSSSSILLLTSSLLSSSLLLLTSSL}\"))).itoDF);\n      v275.get().iselect(v275.get()(100), v275.get()(101), v275.get()(102), v275.get()(103), v275.get()(106), v275.get()(107), v275.get()(108), v275.get()(69), v275.get()(70), v275.get()(71), v275.get()(72), v275.get()(73), v275.get()(74), v275.get()(75), v275.get()(76), v275.get()(77), v275.get()(78), v275.get()(79), v275.get()(80), v275.get()(81), v275.get()(82), v275.get()(83), v275.get()(84), v275.get()(1), v275.get()(37), v275.get()(38), v275.get()(39), v275.get()(40), v275.get()(41), v275.get()(42), v275.get()(43), v275.get()(44), v275.get()(45), v275.get()(46), v275.get()(47), v275.get()(48), v275.get()(49), v275.get()(50), v275.get()(51), v275.get()(52), v275.get()(55), v275.get()(56), v275.get()(57), v275.get()(65), v275.get()(66), v275.get()(68));\n    }\n\n    val f276:(DataFrame,DataFrame)\u003d\u003eUnit \u003d (p321,p277)\u003d\u003e{\n      val v278 \u003d Step(p277.itoDF);\n      val v279 \u003d Step(lit(\"Inactive\"));\n      val v280 \u003d Step(icast(lit(10000003), LongType));\n      val v281 \u003d Step(lit(\" \"));\n      val v282 \u003d Step(e_ltrim(e_rtrim(when(upper(v278.get()(88)).\u003d\u003d\u003d(v279.get()).||(v278.get()(61).\u003d\u003d\u003d(v280.get())).||(v278.get()(62).\u003d\u003d\u003d(v280.get())).||(v278.get()(43).\u003d\u003d\u003d(v280.get())).||(v278.get()(42).\u003d\u003d\u003d(v280.get())), v279.get()).otherwise(lit(\"Active\")), v281.get()), v281.get()));\n      val v283 \u003d Step(e_ltrim(e_rtrim(v278.get()(49), v281.get()), v281.get()));\n      val v284 \u003d Step(v278.get()(87));\n      val v285 \u003d Step(e_ltrim(e_rtrim(v284.get(), v281.get()), v281.get()));\n      val v286 \u003d Step(e_ltrim(e_rtrim(icast(v278.get()(86), StringType), v281.get()), v281.get()));\n      val v287 \u003d Step(e_ltrim(e_rtrim(v278.get()(65), v281.get()), v281.get()));\n      val v288 \u003d Step(e_ltrim(e_rtrim(v278.get()(64), v281.get()), v281.get()));\n      val v289 \u003d Step(v278.get()(77));\n      val v290 \u003d Step(lit(\"\"));\n      val v291 \u003d Step(lit(\"Y\"));\n      val v292 \u003d Step(lit(\"N\"));\n      val v293 \u003d Step(e_ltrim(e_rtrim(when(upper(when(v289.get().isNull, v290.get()).otherwise(v289.get())).\u003d\u003d\u003d(lit(\"ECPO\")), v291.get()).otherwise(v292.get()), v281.get()), v281.get()));\n      val v294 \u003d Step(e_ltrim(e_rtrim(v278.get()(45), v281.get()), v281.get()));\n      val v295 \u003d Step(v278.get()(80));\n      val v296 \u003d Step(e_ltrim(e_rtrim(when(upper(when(v295.get().isNull, v290.get()).otherwise(v295.get())).\u003d\u003d\u003d(lit(\"LEVDOT\")), v291.get()).otherwise(v292.get()), v281.get()), v281.get()));\n      val v297 \u003d Step(e_ltrim(e_rtrim(v278.get()(52), v281.get()), v281.get()));\n      val v298 \u003d Step(v278.get()(9));\n      val v299 \u003d Step(e_ltrim(e_rtrim(when(upper(when(v298.get().isNull, v290.get()).otherwise(v298.get())).\u003d\u003d\u003d(lit(\"OPPLUMPSUM\")), v291.get()).otherwise(v292.get()), v281.get()), v281.get()));\n      val v300 \u003d Step(e_ltrim(e_rtrim(v278.get()(63), v281.get()), v281.get()));\n      val v301 \u003d Step(e_ltrim(e_rtrim(v278.get()(51), v281.get()), v281.get()));\n      val v302 \u003d Step(v278.get()(7));\n      val v303 \u003d Step(e_ltrim(e_rtrim(when(upper(when(v302.get().isNull, v290.get()).otherwise(v302.get())).\u003d\u003d\u003d(lit(\"EOBNF\")), v291.get()).otherwise(v292.get()), v281.get()), v281.get()));\n      val v304 \u003d Step(e_ltrim(e_rtrim(v278.get()(50), v281.get()), v281.get()));\n      val v305 \u003d Step(upper(md5(infaConcat(v282.get(), v283.get(), v285.get(), v286.get(), v287.get(), v288.get(), v293.get(), v294.get(), v296.get(), v297.get(), v299.get(), v300.get(), v301.get(), v303.get(), v304.get()))));\n      val v306 \u003d Step(v305.get().isNull);\n      val v307 \u003d Step(v306.get().\u0026\u0026(v306.get().unary_!));\n      val v308 \u003d Step(lit(1));\n      val v309 \u003d Step(DataTypes.createDecimalType(38, 2));\n      val v310 \u003d Step(DataTypes.createDecimalType(18, 2));\n      val v311 \u003d Step(lit(\"MM/DD/YYYY HH24:MI:SS\"));\n      val v312 \u003d Step(upper(md5(infaConcat(v282.get(), e_ltrim(e_rtrim(v278.get()(57), v281.get()), v281.get()), v283.get(), e_ltrim(e_rtrim(icast(icast(v278.get()(89), LongType), StringType), v281.get()), v281.get()), v286.get(), e_ltrim(e_rtrim(icast(v278.get()(46), StringType), v281.get()), v281.get()), e_ltrim(e_rtrim(v305.get(), v281.get()), v281.get()), e_ltrim(e_rtrim(icast(v278.get()(54), StringType), v281.get()), v281.get()), e_ltrim(e_rtrim(icast(icast(v278.get()(11), IntegerType), StringType), v281.get()), v281.get()), v296.get(), v297.get(), v299.get(), v300.get(), e_ltrim(e_rtrim(icast(icast(v278.get()(16), v309.get()), StringType), v281.get()), v281.get()), e_ltrim(e_rtrim(icast(icast(v278.get()(84), v310.get()), StringType), v281.get()), v281.get()), v303.get(), e_ltrim(e_rtrim(v278.get()(56), v281.get()), v281.get()), v304.get(), e_ltrim(e_rtrim(icast(v278.get()(59), StringType), v281.get()), v281.get()), e_ltrim(e_rtrim(icast(icast(v278.get()(85), v310.get()), StringType), v281.get()), v281.get()), e_ltrim(e_rtrim(icast(v278.get()(48), StringType), v281.get()), v281.get()), e_ltrim(e_rtrim(icast(icast(v278.get()(14), IntegerType), StringType), v281.get()), v281.get()), e_ltrim(e_rtrim(icast(v278.get()(55), StringType), v281.get()), v281.get()), v285.get(), e_ltrim(e_rtrim(icast(icast(v278.get()(71), v309.get()), StringType), v281.get()), v281.get()), e_ltrim(e_rtrim(icast(icast(v278.get()(72), IntegerType), StringType), v281.get()), v281.get()), v287.get(), e_ltrim(e_rtrim(icast(icast(v278.get()(17), IntegerType), StringType), v281.get()), v281.get()), v288.get(), v293.get(), v294.get(), e_ltrim(e_rtrim(icast(icast(v278.get()(73), v309.get()), StringType), v281.get()), v281.get()), e_ltrim(e_rtrim(icast(v278.get()(53), StringType), v281.get()), v281.get()), e_ltrim(e_rtrim(icast(v278.get()(60), StringType), v281.get()), v281.get()), e_ltrim(e_rtrim(icast(icast(v278.get()(13), v309.get()), StringType), v281.get()), v281.get()), e_ltrim(e_rtrim(icast(v278.get()(47), StringType), v281.get()), v281.get()), e_ltrim(e_rtrim(icast(v278.get()(0), StringType), v281.get()), v281.get()), e_ltrim(e_rtrim(v278.get()(58), v281.get()), v281.get()), e_ltrim(e_rtrim(icast(e_to_date(v278.get()(74), v311.get()), StringType), v281.get()), v281.get()), v301.get()))));\n      val v313 \u003d Step(lit(0));\n      val v314 \u003d Step(when(v307.get(), v308.get()).otherwise(when(v307.get().\u0026\u0026(v284.get().!\u003d\u003d(lit(\"D\"))), lit(2)).otherwise(when(v305.get().\u003d\u003d\u003d(v305.get()).\u0026\u0026(v312.get().!\u003d\u003d(v312.get())), lit(3)).otherwise(v313.get()))));\n      val v315 \u003d Step(v278.get().where(v314.get().\u003d\u003d\u003d(v308.get())).iselectWith(infa_sequence_generator(\"DisnextJobApplication\", \"U:8kGFOVD-Ee-qQY-Tm7OrMg\", \"\", 1, 1L, 500, \"${AGENT_REST_URL_FOR_SEQ_GEN}\", 60000, 9223372036854775807L, \"Sequence\", false, false, sc, org.apache.log4j.Level.INFO)));\n      val v316 \u003d Step(icast(lit(params.str(\"GLOBAL.$JPMAXSK\")), LongType, true));\n      val v317 \u003d Step(lit(params.str(\"GLOBAL.$CURRENTMAPPINGNAME\")));\n      val v318 \u003d Step(lit(255));\n      val v319 \u003d Step(updatePartitions(v315.get().iselectWith(v316.get().+(v315.get()(138)), current_timestamp(), e_substr2(v317.get(), v313.get(), lit(50)), e_substr2(lit(params.str(\"GLOBAL.$JPTABLENAME\")), v313.get(), v318.get()), e_substr2(lit(params.str(\"GLOBAL.$EDM_REDSHIFT_TARGET_FULL_SCHEMA\")), v313.get(), v318.get()), e_substr2(v317.get(), v313.get(), v318.get()), v316.get(), icast(lit(params.str(\"GLOBAL.$JPBATCHKEY\")), LongType, true))));\n      val v320 \u003d Step(v319.get().iagg(max(v319.get()(139)), max(v308.get()), last(v319.get()(140), false), last(v319.get()(141), false), last(v319.get()(142), false), last(v319.get()(143), false), last(v319.get()(144), false), last(v319.get()(145), false), last(v319.get()(146), false)));\n      Async()(v320.get().iselect(icast(v320.get()(5), StringType), icast(v320.get()(4), StringType), icast(v320.get()(6), StringType), icast(v320.get()(7), LongType), icast(when(v308.get().\u003d\u003d\u003d(v320.get()(1)), v320.get()(0)).otherwise(lit(null)), LongType), icast(v320.get()(8), LongType), icast(e_substr2(e_to_char(v320.get()(2), v311.get()), v313.get(), lit(35)), StringType), icast(v320.get()(3), StringType)).toDF(\"schemaname\", \"tablename\", \"jobname\", \"prev_maxsurkey\", \"maxsurkey\", \"batchkey\", \"created_ts\", \"created_nm\").write.mode(\"overwrite\").option(\"compression\", \"Gzip\").option(\"quote\", \"\u001f\").option(\"ignoreTrailingWhiteSpace\", false).option(\"escape\", \"\\\\\").option(\"emptyValue\", \"\").option(\"encoding\", \"UTF-8\").option(\"nullValue\", null).option(\"sep\", \"\u001e\").option(\"ignoreLeadingWhiteSpace\", false).option(\"header\", true).csv(\"s3a://nyl-datawarehouse-dev-rs-temp-20230120223907439400000003/rs-idmc-temp/6f443290-5377-4616-a285-bb1c2878913511172262414641258598255002310231873041/INSERT_ds_staging_conv.ops_etl_config_batch_key_\"));\n      f105(p321, f240(v315.get()), v278.get().where(v314.get().!\u003d\u003d(v308.get())));\n    }\n\n    val f322:(DataFrame,DataFrame)\u003d\u003eUnit \u003d (p325,p323)\u003d\u003e{\n      Async()(p323.toDF(\"batch_key\", \"error_category\", \"error_description\", \"error_type\", \"source_column_name\", \"source_table_name\", \"target_column_name\", \"target_table_name\", \"error_column_value\", \"edh_insert_ts\", \"edh_insert_job_nm\").write.mode(\"overwrite\").option(\"compression\", \"Gzip\").option(\"quote\", \"\u001f\").option(\"ignoreTrailingWhiteSpace\", false).option(\"escape\", \"\\\\\").option(\"emptyValue\", \"\").option(\"encoding\", \"UTF-8\").option(\"nullValue\", null).option(\"sep\", \"\u001e\").option(\"ignoreLeadingWhiteSpace\", false).option(\"header\", true).csv(\"s3a://nyl-datawarehouse-dev-rs-temp-20230120223907439400000003/rs-idmc-temp/6f443290-5377-4616-a285-bb1c28789135111722624146316208858053059492571873041/INSERT_ds_staging_conv.etl_nb_reject_table_\"));\n      val v324 \u003d Step(sqlContext.read.option(\"compression\", \"Gzip\").option(\"quote\", \"\\\"\").option(\"ignoreTrailingWhiteSpace\", false).option(\"escape\", \"\\\\\").option(\"emptyValue\", \"\").option(\"encoding\", \"UTF-8\").option(\"sep\", \"\u001e\").option(\"ignoreLeadingWhiteSpace\", false).csv(\"s3a://nyl-datawarehouse-dev-rs-temp-20230120223907439400000003/rs-idmc-temp/6f443290-5377-4616-a285-bb1c2878913500172262414603956453898511010991873041\", ParseType[StructType](\"{LSLIIILSSLSSIIISSSSSSIId3802ISd3802Id3802Id3802ISSSSd1802d1802SSLSSLSS}\")).itoDF(\"m\"));\n      val v326 \u003d Step(p325(45));\n      val v327 \u003d Step(lit(\" \"));\n      val v328 \u003d Step(lit(\"\"));\n      val v329 \u003d Step(when(e_ltrim(e_rtrim(v326.get(), v327.get()), v327.get()).isNull, v328.get()));\n      val v330 \u003d Step(p325(86));\n      val v331 \u003d Step(icast(v330.get(), StringType));\n      val v332 \u003d Step(e_ltrim(e_rtrim(v331.get(), v327.get()), v327.get()).isNull);\n      val v333 \u003d Step(icast(p325(46), StringType));\n      val v334 \u003d Step(when(e_ltrim(e_rtrim(v333.get(), v327.get()), v327.get()).isNull, v328.get()));\n      val v335 \u003d Step(icast(p325(48), StringType));\n      val v336 \u003d Step(when(e_ltrim(e_rtrim(v335.get(), v327.get()), v327.get()).isNull, v328.get()));\n      val v337 \u003d Step(icast(p325(47), StringType));\n      val v338 \u003d Step(when(e_ltrim(e_rtrim(v337.get(), v327.get()), v327.get()).isNull, v328.get()));\n      val v339 \u003d Step(p325(51));\n      val v340 \u003d Step(when(e_ltrim(e_rtrim(v339.get(), v327.get()), v327.get()).isNull, v328.get()));\n      val v341 \u003d Step(lit(1));\n      val v342 \u003d Step(lit(\"B\"));\n      val v343 \u003d Step(infaConcat(v329.get().otherwise(e_rtrim(e_ltrim(v326.get(), v327.get()), v342.get())), when(v332.get(), v328.get()).otherwise(e_rtrim(e_ltrim(v331.get(), v327.get()), v342.get())), v334.get().otherwise(e_rtrim(e_ltrim(v333.get(), v327.get()), v342.get())), v336.get().otherwise(e_rtrim(e_ltrim(v335.get(), v327.get()), v342.get())), v338.get().otherwise(e_rtrim(e_ltrim(v337.get(), v327.get()), v342.get())), v340.get().otherwise(e_rtrim(e_ltrim(v339.get(), v327.get()), v342.get()))));\n      val v344 \u003d Step(updatePartitions(p325.where(icast(infaConcat(v329.get().otherwise(v326.get()), icast(when(v332.get(), lit(null)).otherwise(v330.get()), StringType), v334.get().otherwise(v333.get()), v336.get().otherwise(v335.get()), v338.get().otherwise(v337.get()), v340.get().otherwise(v339.get())), IntegerType).\u003d\u003d\u003d(v341.get()).\u0026\u0026(icast(when(v343.get().\u003d\u003d\u003d(v343.get()), lit(0)).otherwise(v341.get()).\u003d\u003d\u003d(v341.get()), IntegerType).\u003d\u003d\u003d(v341.get()))).itoDF(\"d\"), v324.get()));\n      val v345 \u003d Step(DataTypes.createDecimalType(38, 2));\n      val v346 \u003d Step(DataTypes.createDecimalType(18, 2));\n      val v347 \u003d Step(lit(\"Inactive\"));\n      val v348 \u003d Step(icast(lit(10000003), LongType));\n      val v349 \u003d Step(v344.get()(77));\n      val v350 \u003d Step(lit(\"Y\"));\n      val v351 \u003d Step(lit(\"N\"));\n      val v352 \u003d Step(v344.get()(80));\n      val v353 \u003d Step(v344.get()(9));\n      val v354 \u003d Step(v344.get()(7));\n      f276(v324.get(), v344.get().join(v324.get(), md5(infaConcat(e_ltrim(e_rtrim(icast(v324.get()(38), StringType), v327.get()), v327.get()), e_ltrim(e_rtrim(icast(v324.get()(7), StringType), v327.get()), v327.get()), e_ltrim(e_rtrim(icast(v324.get()(16), StringType), v327.get()), v327.get()), e_ltrim(e_rtrim(icast(icast(v324.get()(6), LongType), StringType), v327.get()), v327.get()), e_ltrim(e_rtrim(icast(v324.get()(44), StringType), v327.get()), v327.get()), e_ltrim(e_rtrim(icast(v324.get()(45), StringType), v327.get()), v327.get()), e_ltrim(e_rtrim(icast(icast(v324.get()(2), LongType), StringType), v327.get()), v327.get()), e_ltrim(e_rtrim(icast(icast(v324.get()(40), LongType), StringType), v327.get()), v327.get()), e_ltrim(e_rtrim(icast(icast(v324.get()(3), IntegerType), StringType), v327.get()), v327.get()), e_ltrim(e_rtrim(icast(v324.get()(41), StringType), v327.get()), v327.get()), e_ltrim(e_rtrim(icast(v324.get()(42), StringType), v327.get()), v327.get()), e_ltrim(e_rtrim(icast(icast(v324.get()(0), LongType), StringType), v327.get()), v327.get()), e_ltrim(e_rtrim(icast(icast(v324.get()(13), IntegerType), StringType), v327.get()), v327.get()), e_ltrim(e_rtrim(icast(icast(v324.get()(31), IntegerType), StringType), v327.get()), v327.get()), e_ltrim(e_rtrim(icast(v324.get()(34), StringType), v327.get()), v327.get()), e_ltrim(e_rtrim(icast(v324.get()(11), StringType), v327.get()), v327.get()), e_ltrim(e_rtrim(icast(v324.get()(33), StringType), v327.get()), v327.get()), e_ltrim(e_rtrim(icast(icast(v324.get()(43), LongType), StringType), v327.get()), v327.get()), e_ltrim(e_rtrim(icast(v324.get()(17), StringType), v327.get()), v327.get()), e_ltrim(e_rtrim(icast(icast(v324.get()(26), v345.get()), StringType), v327.get()), v327.get()), e_ltrim(e_rtrim(icast(v324.get()(35), StringType), v327.get()), v327.get()), e_ltrim(e_rtrim(icast(icast(v324.get()(36), v346.get()), StringType), v327.get()), v327.get()), e_ltrim(e_rtrim(icast(v324.get()(15), StringType), v327.get()), v327.get()), e_ltrim(e_rtrim(icast(v324.get()(8), StringType), v327.get()), v327.get()), e_ltrim(e_rtrim(icast(icast(v324.get()(21), IntegerType), StringType), v327.get()), v327.get()), e_ltrim(e_rtrim(icast(icast(v324.get()(37), v346.get()), StringType), v327.get()), v327.get()), e_ltrim(e_rtrim(icast(icast(v324.get()(4), IntegerType), StringType), v327.get()), v327.get()), e_ltrim(e_rtrim(icast(icast(v324.get()(29), IntegerType), StringType), v327.get()), v327.get()), e_ltrim(e_rtrim(icast(icast(v324.get()(14), IntegerType), StringType), v327.get()), v327.get()), e_ltrim(e_rtrim(icast(v324.get()(39), StringType), v327.get()), v327.get()), e_ltrim(e_rtrim(icast(icast(v324.get()(23), v345.get()), StringType), v327.get()), v327.get()), e_ltrim(e_rtrim(icast(icast(v324.get()(24), IntegerType), StringType), v327.get()), v327.get()), e_ltrim(e_rtrim(icast(v324.get()(20), StringType), v327.get()), v327.get()), e_ltrim(e_rtrim(icast(icast(v324.get()(27), IntegerType), StringType), v327.get()), v327.get()), e_ltrim(e_rtrim(icast(v324.get()(18), StringType), v327.get()), v327.get()), e_ltrim(e_rtrim(icast(v324.get()(32), StringType), v327.get()), v327.get()), e_ltrim(e_rtrim(icast(v324.get()(1), StringType), v327.get()), v327.get()), e_ltrim(e_rtrim(icast(icast(v324.get()(30), v345.get()), StringType), v327.get()), v327.get()), e_ltrim(e_rtrim(icast(icast(v324.get()(12), IntegerType), StringType), v327.get()), v327.get()), e_ltrim(e_rtrim(icast(icast(v324.get()(22), IntegerType), StringType), v327.get()), v327.get()), e_ltrim(e_rtrim(icast(icast(v324.get()(28), v345.get()), StringType), v327.get()), v327.get()), e_ltrim(e_rtrim(icast(icast(v324.get()(5), IntegerType), StringType), v327.get()), v327.get()), e_ltrim(e_rtrim(icast(icast(v324.get()(9), LongType), StringType), v327.get()), v327.get()), e_ltrim(e_rtrim(icast(v324.get()(19), StringType), v327.get()), v327.get()), e_ltrim(e_rtrim(icast(v324.get()(10), StringType), v327.get()), v327.get()), e_ltrim(e_rtrim(icast(icast(e_to_date(v324.get()(25), lit(\"YYYY-MM-DD\")), TimestampType), StringType), v327.get()), v327.get()))).\u003d\u003d\u003d(upper(md5(infaConcat(e_ltrim(e_rtrim(when(upper(v344.get()(88)).\u003d\u003d\u003d(v347.get()).||(v344.get()(61).\u003d\u003d\u003d(v348.get())).||(v344.get()(62).\u003d\u003d\u003d(v348.get())).||(v344.get()(43).\u003d\u003d\u003d(v348.get())).||(v344.get()(42).\u003d\u003d\u003d(v348.get())), v347.get()).otherwise(lit(\"Active\")), v327.get()), v327.get()), e_ltrim(e_rtrim(v344.get()(49), v327.get()), v327.get()), e_ltrim(e_rtrim(v344.get()(87), v327.get()), v327.get()), e_ltrim(e_rtrim(icast(v344.get()(86), StringType), v327.get()), v327.get()), e_ltrim(e_rtrim(v344.get()(65), v327.get()), v327.get()), e_ltrim(e_rtrim(v344.get()(64), v327.get()), v327.get()), e_ltrim(e_rtrim(when(upper(when(v349.get().isNull, v328.get()).otherwise(v349.get())).\u003d\u003d\u003d(lit(\"ECPO\")), v350.get()).otherwise(v351.get()), v327.get()), v327.get()), e_ltrim(e_rtrim(v344.get()(45), v327.get()), v327.get()), e_ltrim(e_rtrim(when(upper(when(v352.get().isNull, v328.get()).otherwise(v352.get())).\u003d\u003d\u003d(lit(\"LEVDOT\")), v350.get()).otherwise(v351.get()), v327.get()), v327.get()), e_ltrim(e_rtrim(v344.get()(52), v327.get()), v327.get()), e_ltrim(e_rtrim(when(upper(when(v353.get().isNull, v328.get()).otherwise(v353.get())).\u003d\u003d\u003d(lit(\"OPPLUMPSUM\")), v350.get()).otherwise(v351.get()), v327.get()), v327.get()), e_ltrim(e_rtrim(v344.get()(63), v327.get()), v327.get()), e_ltrim(e_rtrim(v344.get()(51), v327.get()), v327.get()), e_ltrim(e_rtrim(when(upper(when(v354.get().isNull, v328.get()).otherwise(v354.get())).\u003d\u003d\u003d(lit(\"EOBNF\")), v350.get()).otherwise(v351.get()), v327.get()), v327.get()), e_ltrim(e_rtrim(v344.get()(50), v327.get()), v327.get()))))), \"inner\"));\n    }\n\n    val f355:(DataFrame)\u003d\u003eDataFrame \u003d (p356)\u003d\u003e{\n      val v357 \u003d Step(ParseType[StructType](\"{LS}\"));\n      val v358 \u003d Step(sqlContext.read.option(\"compression\", \"Gzip\").option(\"quote\", \"\\\"\").option(\"ignoreTrailingWhiteSpace\", false).option(\"escape\", \"\\\\\").option(\"emptyValue\", \"\").option(\"encoding\", \"UTF-8\").option(\"sep\", \"\u001e\").option(\"ignoreLeadingWhiteSpace\", false).csv(\"s3a://nyl-datawarehouse-dev-rs-temp-20230120223907439400000003/rs-idmc-temp/6f443290-5377-4616-a285-bb1c2878913500172262414599890098354672586121873041\", v357.get()).itoDF);\n      val v359 \u003d Step(sqlContext.read.option(\"compression\", \"Gzip\").option(\"quote\", \"\\\"\").option(\"ignoreTrailingWhiteSpace\", false).option(\"escape\", \"\\\\\").option(\"emptyValue\", \"\").option(\"encoding\", \"UTF-8\").option(\"sep\", \"\u001e\").option(\"ignoreLeadingWhiteSpace\", false).csv(\"s3a://nyl-datawarehouse-dev-rs-temp-20230120223907439400000003/rs-idmc-temp/6f443290-5377-4616-a285-bb1c2878913500172262414600835718684012248571873041\", v357.get()).itoDF);\n      val v360 \u003d Step(sqlContext.read.option(\"compression\", \"Gzip\").option(\"quote\", \"\\\"\").option(\"ignoreTrailingWhiteSpace\", false).option(\"escape\", \"\\\\\").option(\"emptyValue\", \"\").option(\"encoding\", \"UTF-8\").option(\"sep\", \"\u001e\").option(\"ignoreLeadingWhiteSpace\", false).csv(\"s3a://nyl-datawarehouse-dev-rs-temp-20230120223907439400000003/rs-idmc-temp/6f443290-5377-4616-a285-bb1c2878913500172262414606574403041733153811873041\", ParseType[StructType](\"{LL}\")).itoDF);\n      val v361 \u003d Step(ParseType[StructType](\"{Ld1802L}\"));\n      val v362 \u003d Step(sqlContext.read.option(\"compression\", \"Gzip\").option(\"quote\", \"\\\"\").option(\"ignoreTrailingWhiteSpace\", false).option(\"escape\", \"\\\\\").option(\"emptyValue\", \"\").option(\"encoding\", \"UTF-8\").option(\"sep\", \"\u001e\").option(\"ignoreLeadingWhiteSpace\", false).csv(\"s3a://nyl-datawarehouse-dev-rs-temp-20230120223907439400000003/rs-idmc-temp/6f443290-5377-4616-a285-bb1c28789135001722624145900081450251555030721873041\", v361.get()).itoDF);\n      val v363 \u003d Step(DataTypes.createDecimalType(18, 2));\n      val v364 \u003d Step(sqlContext.read.option(\"compression\", \"Gzip\").option(\"quote\", \"\\\"\").option(\"ignoreTrailingWhiteSpace\", false).option(\"escape\", \"\\\\\").option(\"emptyValue\", \"\").option(\"encoding\", \"UTF-8\").option(\"sep\", \"\u001e\").option(\"ignoreLeadingWhiteSpace\", false).csv(\"s3a://nyl-datawarehouse-dev-rs-temp-20230120223907439400000003/rs-idmc-temp/6f443290-5377-4616-a285-bb1c2878913500172262414598739445809308604951873041\", v361.get()).itoDF);\n      val v365 \u003d Step(sqlContext.read.option(\"compression\", \"Gzip\").option(\"quote\", \"\\\"\").option(\"ignoreTrailingWhiteSpace\", false).option(\"escape\", \"\\\\\").option(\"emptyValue\", \"\").option(\"encoding\", \"UTF-8\").option(\"sep\", \"\u001e\").option(\"ignoreLeadingWhiteSpace\", false).csv(\"s3a://nyl-datawarehouse-dev-rs-temp-20230120223907439400000003/rs-idmc-temp/6f443290-5377-4616-a285-bb1c287891350017226241460876162244408612251873041\", ParseType[StructType](\"{LLLI}\")).itoDF);\n      val v366 \u003d Step(sqlContext.read.option(\"compression\", \"Gzip\").option(\"quote\", \"\\\"\").option(\"ignoreTrailingWhiteSpace\", false).option(\"escape\", \"\\\\\").option(\"emptyValue\", \"\").option(\"encoding\", \"UTF-8\").option(\"sep\", \"\u001e\").option(\"ignoreLeadingWhiteSpace\", false).csv(\"s3a://nyl-datawarehouse-dev-rs-temp-20230120223907439400000003/rs-idmc-temp/6f443290-5377-4616-a285-bb1c28789135001722624146019492469463708093751873041\", ParseType[StructType](\"{LLLSL}\")).itoDF(\"m\"));\n      val v367 \u003d Step(updatePartitions(sqlContext.read.option(\"compression\", \"Gzip\").option(\"quote\", \"\\\"\").option(\"ignoreTrailingWhiteSpace\", false).option(\"escape\", \"\\\\\").option(\"emptyValue\", \"\").option(\"encoding\", \"UTF-8\").option(\"sep\", \"\u001e\").option(\"ignoreLeadingWhiteSpace\", false).csv(\"s3a://nyl-datawarehouse-dev-rs-temp-20230120223907439400000003/rs-idmc-temp/6f443290-5377-4616-a285-bb1c28789135001722624146144389801718284366941873041\", ParseType[StructType](\"{LLLSSSSLLLSSSSSSLLL}\")).itoDF(\"d\"), v366.get()));\n      val v368 \u003d Step(v367.get().join(v366.get(), icast(v366.get()(0), LongType).\u003d\u003d\u003d(icast(v367.get()(0), LongType)), \"inner\").itoDF(\"m\"));\n      val v369 \u003d Step(updatePartitions(sqlContext.read.option(\"compression\", \"Gzip\").option(\"quote\", \"\\\"\").option(\"ignoreTrailingWhiteSpace\", false).option(\"escape\", \"\\\\\").option(\"emptyValue\", \"\").option(\"encoding\", \"UTF-8\").option(\"sep\", \"\u001e\").option(\"ignoreLeadingWhiteSpace\", false).csv(\"s3a://nyl-datawarehouse-dev-rs-temp-20230120223907439400000003/rs-idmc-temp/6f443290-5377-4616-a285-bb1c2878913500172262414609869792115731701511873041\", ParseType[StructType](\"{LLL}\")).itoDF(\"d\"), v368.get()));\n      val v370 \u003d Step(v369.get().join(v368.get(), icast(v368.get()(20), LongType).\u003d\u003d\u003d(icast(v369.get()(0), LongType)), \"inner\").itoDF(\"m\"));\n      val v371 \u003d Step(updatePartitions(v365.get().where(icast(v365.get()(3), IntegerType).\u003d\u003d\u003d(lit(8))).itoDF(\"d\"), v370.get()));\n      val v372 \u003d Step(v371.get().join(v370.get(), icast(v370.get()(4), LongType).\u003d\u003d\u003d(icast(v371.get()(0), LongType)).\u0026\u0026(icast(v370.get()(1), LongType).\u003d\u003d\u003d(icast(v371.get()(1), LongType))), \"inner\").itoDF);\n      val v373 \u003d Step(icast(v372.get()(27), LongType));\n      val v374 \u003d Step(icast(v372.get()(28), LongType));\n      val v375 \u003d Step(icast(v372.get()(30), LongType));\n      val v376 \u003d Step(icast(v372.get()(7), LongType));\n      val v377 \u003d Step(icast(v372.get()(10), StringType));\n      val v378 \u003d Step(icast(v372.get()(11), StringType));\n      val v379 \u003d Step(icast(v372.get()(12), StringType));\n      val v380 \u003d Step(icast(v372.get()(13), StringType));\n      val v381 \u003d Step(icast(v372.get()(14), LongType));\n      val v382 \u003d Step(icast(v372.get()(15), LongType));\n      val v383 \u003d Step(icast(v372.get()(16), LongType));\n      val v384 \u003d Step(icast(v372.get()(17), StringType));\n      val v385 \u003d Step(icast(v372.get()(18), StringType));\n      val v386 \u003d Step(icast(v372.get()(19), StringType));\n      val v387 \u003d Step(icast(v372.get()(20), StringType));\n      val v388 \u003d Step(icast(v372.get()(21), StringType));\n      val v389 \u003d Step(icast(v372.get()(22), StringType));\n      val v390 \u003d Step(icast(v372.get()(23), LongType));\n      val v391 \u003d Step(icast(v372.get()(24), LongType));\n      val v392 \u003d Step(icast(v372.get()(25), LongType));\n      val v393 \u003d Step(lit(0));\n      val v394 \u003d Step(upper(v386.get()));\n      val v395 \u003d Step(lit(\"YES\"));\n      val v396 \u003d Step(lit(\"Y\"));\n      val v397 \u003d Step(lit(\"NO\"));\n      val v398 \u003d Step(lit(\"N\"));\n      val v399 \u003d Step(lit(null));\n      val v400 \u003d Step(lit(\" \"));\n      val v401 \u003d Step(e_ltrim(e_rtrim(upper(v387.get()), v400.get()), v400.get()));\n      val v402 \u003d Step(upper(v389.get()));\n      val v403 \u003d Step(sqlContext.read.option(\"compression\", \"Gzip\").option(\"quote\", \"\\\"\").option(\"ignoreTrailingWhiteSpace\", false).option(\"escape\", \"\\\\\").option(\"emptyValue\", \"\").option(\"encoding\", \"UTF-8\").option(\"sep\", \"\u001e\").option(\"ignoreLeadingWhiteSpace\", false).csv(\"s3a://nyl-datawarehouse-dev-rs-temp-20230120223907439400000003/rs-idmc-temp/6f443290-5377-4616-a285-bb1c28789135001722624145976145305419472150031873041\", ParseType[StructType](\"{Ld1802Ld1802S}\")).itoDF(\"m\"));\n      val v404 \u003d Step(updatePartitions(v372.get().iselect(v373.get(), v374.get(), icast(v372.get()(29), StringType), v375.get(), v376.get(), icast(v372.get()(8), LongType), icast(v372.get()(9), LongType), v377.get(), v378.get(), v379.get(), v380.get(), v381.get(), v382.get(), v383.get(), v384.get(), v385.get(), v386.get(), v387.get(), v388.get(), v389.get(), v390.get(), v391.get(), v392.get(), icast(v372.get()(5), LongType), icast(v372.get()(6), LongType), icast(v372.get()(2), LongType), icast(v372.get()(3), IntegerType), lit(\"NB21\"), v374.get(), v376.get(), v373.get(), v378.get(), v379.get(), v377.get(), v380.get(), v381.get(), v382.get(), v383.get(), v384.get(), e_substr2(v385.get(), v393.get(), lit(20)), e_substr2(v388.get(), v393.get(), lit(30)), v390.get(), v391.get(), v375.get(), v392.get(), when(v394.get().\u003d\u003d\u003d(v395.get()), v396.get()).otherwise(when(v394.get().\u003d\u003d\u003d(v397.get()), v398.get()).otherwise(v399.get())), when(v401.get().\u003d\u003d\u003d(v395.get()), v396.get()).otherwise(when(v401.get().\u003d\u003d\u003d(v397.get()), v398.get()).otherwise(when(v401.get().\u003d\u003d\u003d(lit(\"UNKNOWN\")), lit(\"U\")).otherwise(lit(\"\")))), when(v402.get().\u003d\u003d\u003d(v395.get()), v396.get()).otherwise(when(v402.get().\u003d\u003d\u003d(v397.get()), v398.get()).otherwise(v399.get()))).itoDF(\"d\"), v403.get()));\n      val v405 \u003d Step(v404.get().join(v403.get(), icast(v403.get()(0), LongType).\u003d\u003d\u003d(v404.get()(29)), \"right_outer\").itoDF(\"m\"));\n      val v406 \u003d Step(updatePartitions(v364.get().iselect(icast(v364.get()(0), LongType), icast(v364.get()(1), v363.get()), icast(v364.get()(2), LongType)).itoDF(\"d\"), v405.get()));\n      val v407 \u003d Step(v406.get().join(v405.get(), v405.get()(29).\u003d\u003d\u003d(v406.get()(0)), \"right_outer\").itoDF(\"m\"));\n      val v408 \u003d Step(updatePartitions(v362.get().iselect(icast(v362.get()(0), LongType), icast(v362.get()(1), v363.get()), icast(v362.get()(2), LongType)).itoDF(\"d\"), v407.get()));\n      val v409 \u003d Step(v408.get().join(v407.get(), v407.get()(32).\u003d\u003d\u003d(v408.get()(0)), \"right_outer\").itoDF(\"m\"));\n      val v410 \u003d Step(updatePartitions(v360.get().iselect(icast(v360.get()(0), LongType), icast(v360.get()(1), LongType)).itoDF(\"d\"), v409.get()));\n      val v411 \u003d Step(v410.get().join(v409.get(), v409.get()(35).\u003d\u003d\u003d(v410.get()(0)), \"right_outer\").itoDF);\n      val v412 \u003d Step(sqlContext.read.option(\"compression\", \"Gzip\").option(\"quote\", \"\\\"\").option(\"ignoreTrailingWhiteSpace\", false).option(\"escape\", \"\\\\\").option(\"emptyValue\", \"\").option(\"encoding\", \"UTF-8\").option(\"sep\", \"\u001e\").option(\"ignoreLeadingWhiteSpace\", false).csv(\"s3a://nyl-datawarehouse-dev-rs-temp-20230120223907439400000003/rs-idmc-temp/6f443290-5377-4616-a285-bb1c287891350017226241461080627840034225181873041\", v357.get()).itoDF(\"m\"));\n      val v413 \u003d Step(updatePartitions(v411.get().iselectWith(icast(v411.get()(57), v363.get()), icast(v411.get()(58), LongType), icast(v411.get()(59), v363.get()), icast(v411.get()(60), StringType)).itoDF(\"d\"), v412.get()));\n      val v414 \u003d Step(v413.get().join(v412.get(), icast(v412.get()(0), LongType).\u003d\u003d\u003d(v413.get()(37)), \"right_outer\").itoDF(\"m\"));\n      val v415 \u003d Step(updatePartitions(v359.get().iselect(icast(v359.get()(0), LongType), icast(v359.get()(1), StringType)).itoDF(\"d\"), v414.get()));\n      val v416 \u003d Step(v415.get().join(v414.get(), v414.get()(37).\u003d\u003d\u003d(v415.get()(0)), \"right_outer\").itoDF);\n      val v417 \u003d Step(sqlContext.read.option(\"compression\", \"Gzip\").option(\"quote\", \"\\\"\").option(\"ignoreTrailingWhiteSpace\", false).option(\"escape\", \"\\\\\").option(\"emptyValue\", \"\").option(\"encoding\", \"UTF-8\").option(\"sep\", \"\u001e\").option(\"ignoreLeadingWhiteSpace\", false).csv(\"s3a://nyl-datawarehouse-dev-rs-temp-20230120223907439400000003/rs-idmc-temp/6f443290-5377-4616-a285-bb1c28789135001722624146054285870388784044251873041\", v357.get()).itoDF(\"m\"));\n      val v418 \u003d Step(updatePartitions(v416.get().iselectWith(icast(v416.get()(68), StringType)).itoDF(\"d\"), v417.get()));\n      val v419 \u003d Step(v418.get().join(v417.get(), icast(v417.get()(0), LongType).\u003d\u003d\u003d(v418.get()(39)), \"right_outer\").itoDF(\"m\"));\n      val v420 \u003d Step(updatePartitions(v358.get().iselect(icast(v358.get()(0), LongType), icast(v358.get()(1), StringType)).itoDF(\"d\"), v419.get()));\n      val v421 \u003d Step(v420.get().join(v419.get(), v419.get()(39).\u003d\u003d\u003d(v420.get()(0)), \"right_outer\").itoDF);\n      val v422 \u003d Step(sqlContext.read.option(\"compression\", \"Gzip\").option(\"quote\", \"\\\"\").option(\"ignoreTrailingWhiteSpace\", false).option(\"escape\", \"\\\\\").option(\"emptyValue\", \"\").option(\"encoding\", \"UTF-8\").option(\"sep\", \"\u001e\").option(\"ignoreLeadingWhiteSpace\", false).csv(\"s3a://nyl-datawarehouse-dev-rs-temp-20230120223907439400000003/rs-idmc-temp/6f443290-5377-4616-a285-bb1c2878913500172262414613040651334694749541873041\", ParseType[StructType](\"{Ld1802d1802}\")).itoDF(\"m\"));\n      val v423 \u003d Step(updatePartitions(v421.get().iselectWith(icast(v421.get()(73), StringType)).itoDF(\"d\"), v422.get()));\n      val v424 \u003d Step(v423.get().join(v422.get(), icast(v422.get()(0), LongType).\u003d\u003d\u003d(v423.get()(41)), \"right_outer\").itoDF(\"m\"));\n      val v425 \u003d Step(updatePartitions(p356, v424.get()));\n      val v426 \u003d Step(v425.get().join(v424.get(), v424.get()(17).\u003d\u003d\u003d(icast(icast(v425.get()(1), IntegerType), LongType)), \"inner\").itoDF);\n      v426.get().iselectWith(icast(v426.get()(80), v363.get()), icast(v426.get()(81), v363.get()), icast(v426.get()(0), LongType), icast(v426.get()(2), StringType), icast(v426.get()(3), StringType));\n    }\n\n    val v427 \u003d Step(sqlContext.read.option(\"compression\", \"Gzip\").option(\"quote\", \"\\\"\").option(\"ignoreTrailingWhiteSpace\", false).option(\"escape\", \"\\\\\").option(\"emptyValue\", \"\").option(\"encoding\", \"UTF-8\").option(\"sep\", \"\u001e\").option(\"ignoreLeadingWhiteSpace\", false).csv(\"s3a://nyl-datawarehouse-dev-rs-temp-20230120223907439400000003/rs-idmc-temp/6f443290-5377-4616-a285-bb1c2878913500172262414607699483274894317711873041\", ParseType[StructType](\"{LS}\")).itoDF);\n    val v428 \u003d Step(sqlContext.read.option(\"compression\", \"Gzip\").option(\"quote\", \"\\\"\").option(\"ignoreTrailingWhiteSpace\", false).option(\"escape\", \"\\\\\").option(\"emptyValue\", \"\").option(\"encoding\", \"UTF-8\").option(\"sep\", \"\u001e\").option(\"ignoreLeadingWhiteSpace\", false).csv(\"s3a://nyl-datawarehouse-dev-rs-temp-20230120223907439400000003/rs-idmc-temp/6f443290-5377-4616-a285-bb1c2878913500172262414611983277826691220721873041\", ParseType[StructType](\"{LSS}\")).itoDF(\"m\"));\n    val v429 \u003d Step(updatePartitions(f355(sqlContext.read.option(\"compression\", \"Gzip\").option(\"quote\", \"\\\"\").option(\"ignoreTrailingWhiteSpace\", false).option(\"escape\", \"\\\\\").option(\"emptyValue\", \"\").option(\"encoding\", \"UTF-8\").option(\"sep\", \"\u001e\").option(\"ignoreLeadingWhiteSpace\", false).csv(\"s3a://nyl-datawarehouse-dev-rs-temp-20230120223907439400000003/rs-idmc-temp/6f443290-5377-4616-a285-bb1c2878913500172262414596331676321466730241873041\", ParseType[StructType](\"{LISS}\")).itoDF(\"d\")).itoDF(\"d\"), v428.get()));\n    val v430 \u003d Step(v429.get().join(v428.get(), icast(v428.get()(1), StringType).\u003d\u003d\u003d(v429.get()(47)).\u0026\u0026(icast(v428.get()(2), StringType).\u003d\u003d\u003d(v429.get()(48))), \"right_outer\").itoDF(\"m\"));\n    val v431 \u003d Step(updatePartitions(v427.get().iselect(icast(v427.get()(0), LongType), icast(v427.get()(1), StringType)).itoDF(\"d\"), v430.get()));\n    val v432 \u003d Step(v431.get().join(v430.get(), v430.get()(49).\u003d\u003d\u003d(v431.get()(1)), \"right_outer\").itoDF);\n    val v433 \u003d Step(v432.get()(45));\n    val v434 \u003d Step(lit(\" \"));\n    val v435 \u003d Step(lit(\"\"));\n    val v436 \u003d Step(when(e_ltrim(e_rtrim(v433.get(), v434.get()), v434.get()).isNull, v435.get()));\n    val v437 \u003d Step(v432.get()(86));\n    val v438 \u003d Step(icast(v437.get(), StringType));\n    val v439 \u003d Step(e_ltrim(e_rtrim(v438.get(), v434.get()), v434.get()).isNull);\n    val v440 \u003d Step(lit(null));\n    val v441 \u003d Step(icast(v432.get()(46), StringType));\n    val v442 \u003d Step(when(e_ltrim(e_rtrim(v441.get(), v434.get()), v434.get()).isNull, v435.get()));\n    val v443 \u003d Step(icast(v432.get()(48), StringType));\n    val v444 \u003d Step(when(e_ltrim(e_rtrim(v443.get(), v434.get()), v434.get()).isNull, v435.get()));\n    val v445 \u003d Step(icast(v432.get()(47), StringType));\n    val v446 \u003d Step(when(e_ltrim(e_rtrim(v445.get(), v434.get()), v434.get()).isNull, v435.get()));\n    val v447 \u003d Step(v432.get()(51));\n    val v448 \u003d Step(when(e_ltrim(e_rtrim(v447.get(), v434.get()), v434.get()).isNull, v435.get()));\n    val v449 \u003d Step(lit(1));\n    val v450 \u003d Step(lit(\"B\"));\n    val v451 \u003d Step(infaConcat(v436.get().otherwise(e_rtrim(e_ltrim(v433.get(), v434.get()), v450.get())), when(v439.get(), v435.get()).otherwise(e_rtrim(e_ltrim(v438.get(), v434.get()), v450.get())), v442.get().otherwise(e_rtrim(e_ltrim(v441.get(), v434.get()), v450.get())), v444.get().otherwise(e_rtrim(e_ltrim(v443.get(), v434.get()), v450.get())), v446.get().otherwise(e_rtrim(e_ltrim(v445.get(), v434.get()), v450.get())), v448.get().otherwise(e_rtrim(e_ltrim(v447.get(), v434.get()), v450.get()))));\n    val v452 \u003d Step(lit(0));\n    val v453 \u003d Step(icast(infaConcat(v436.get().otherwise(v433.get()), icast(when(v439.get(), v440.get()).otherwise(v437.get()), StringType), v442.get().otherwise(v441.get()), v444.get().otherwise(v443.get()), v446.get().otherwise(v445.get()), v448.get().otherwise(v447.get())), IntegerType).\u003d\u003d\u003d(v449.get()).\u0026\u0026(icast(when(v451.get().\u003d\u003d\u003d(v451.get()), v452.get()).otherwise(v449.get()).\u003d\u003d\u003d(v449.get()), IntegerType).\u003d\u003d\u003d(v449.get())));\n    val v454 \u003d Step(v432.get().where(v453.get().isNull.||(v453.get().unary_!)));\n    val v455 \u003d Step(v454.get()(45));\n    val v456 \u003d Step(when(e_ltrim(e_rtrim(v455.get(), v434.get()), v434.get()).isNull, v435.get()));\n    val v457 \u003d Step(v454.get()(86));\n    val v458 \u003d Step(icast(v457.get(), StringType));\n    val v459 \u003d Step(e_ltrim(e_rtrim(v458.get(), v434.get()), v434.get()).isNull);\n    val v460 \u003d Step(v454.get()(46));\n    val v461 \u003d Step(icast(v460.get(), StringType));\n    val v462 \u003d Step(when(e_ltrim(e_rtrim(v461.get(), v434.get()), v434.get()).isNull, v435.get()));\n    val v463 \u003d Step(v454.get()(48));\n    val v464 \u003d Step(icast(v463.get(), StringType));\n    val v465 \u003d Step(when(e_ltrim(e_rtrim(v464.get(), v434.get()), v434.get()).isNull, v435.get()));\n    val v466 \u003d Step(v454.get()(47));\n    val v467 \u003d Step(icast(v466.get(), StringType));\n    val v468 \u003d Step(when(e_ltrim(e_rtrim(v467.get(), v434.get()), v434.get()).isNull, v435.get()));\n    val v469 \u003d Step(v454.get()(51));\n    val v470 \u003d Step(when(e_ltrim(e_rtrim(v469.get(), v434.get()), v434.get()).isNull, v435.get()));\n    val v471 \u003d Step(icast(infaConcat(v456.get().otherwise(v455.get()), icast(when(v459.get(), v440.get()).otherwise(v457.get()), StringType), v462.get().otherwise(v461.get()), v465.get().otherwise(v464.get()), v468.get().otherwise(v467.get()), v470.get().otherwise(v469.get())), IntegerType).\u003d\u003d\u003d(v452.get()));\n    val v472 \u003d Step(infaConcat(v456.get().otherwise(e_rtrim(e_ltrim(v455.get(), v434.get()), v450.get())), when(v459.get(), v435.get()).otherwise(e_rtrim(e_ltrim(v458.get(), v434.get()), v450.get())), v462.get().otherwise(e_rtrim(e_ltrim(v461.get(), v434.get()), v450.get())), v465.get().otherwise(e_rtrim(e_ltrim(v464.get(), v434.get()), v450.get())), v468.get().otherwise(e_rtrim(e_ltrim(v467.get(), v434.get()), v450.get())), v470.get().otherwise(e_rtrim(e_ltrim(v469.get(), v434.get()), v450.get()))));\n    val v473 \u003d Step(when(v472.get().\u003d\u003d\u003d(v472.get()), v452.get()).otherwise(v449.get()).\u003d\u003d\u003d(v452.get()));\n    val v474 \u003d Step(lit(255));\n    val v475 \u003d Step(lit(\",\"));\n    f322(v432.get(), v454.get().iselect(icast(lit(params.str(\"GLOBAL.$JPBATCHKEY\")), LongType), icast(when(v471.get(), lit(\"NK NULL CHECK\")).otherwise(when(v473.get(), lit(\"NK DUPLICATE CHECK\")).otherwise(v435.get())), StringType), icast(when(v471.get(), lit(\"Natural keys are having NULL\")).otherwise(when(v473.get(), lit(\"OnlythelatestrecordloadedtoTargettable\")).otherwise(v435.get())), StringType), icast(when(v471.get(), lit(\"REJECT\")).otherwise(when(v473.get(), lit(\"REJECT DUPLICATE\")).otherwise(v435.get())), StringType), icast(lit(\"fact_contract_part1_sk,cnbnlkid_ref,conrelid_ref,conbenid_ref,plbenfid_code\"), StringType), icast(lit(\"fact_contract_part1,cntr_ben_link,cntr_ben_link,cntr_ben_link,contract_benefit\"), StringType), icast(lit(\"src_sys_nm_nk,fact_nb_contract_part1_sk,src_cnt_bnft_link_ref_id,src_cnt_rel_ref_id,src_cnt_bnft_ref_id,plan_bnft_cd_nk\"), StringType), icast(e_substr2(lit(params.str(\"GLOBAL.$JPTABLENAME\")), v452.get(), v474.get()), StringType), icast(infaConcat(e_ltrim(e_rtrim(when(v455.get().isNull, v435.get()).otherwise(v455.get()), v434.get()), v434.get()), v475.get(), e_ltrim(e_rtrim(icast(when(v457.get().isNull, v440.get()).otherwise(v457.get()), StringType), v434.get()), v434.get()), v475.get(), e_ltrim(e_rtrim(when(v460.get().isNull, v435.get()).otherwise(v461.get()), v434.get()), v434.get()), e_ltrim(e_rtrim(when(v463.get().isNull, v435.get()).otherwise(v464.get()), v434.get()), v434.get()), v475.get(), e_ltrim(e_rtrim(when(v466.get().isNull, v435.get()).otherwise(v467.get()), v434.get()), v434.get()), v475.get(), e_ltrim(e_rtrim(when(v469.get().isNull, v435.get()).otherwise(v469.get()), v434.get()), v434.get())), StringType), icast(e_to_char(lit(params.date(\"GLOBAL.$SESSSTARTTIME\")), lit(\"MM/DD/YYYY HH24:MI:SS\")), StringType), icast(e_substr2(lit(params.str(\"GLOBAL.$DSJOBNAME\")), v452.get(), v474.get()), StringType)));\n    val postJobs \u003d () \u003d\u003e {\n      runUserDefinedJob(\"\", \"method\", \"\", \"com.informatica.cci.runtime.adapterutils.CCITaskUtils\", \"invocationMethod\", List(\"posttask\", \"package-AmazonRedshiftV2.46000501.light.zip\", \"/package/redshift/thirdparty\"), List(params.extern(21)), Map(Tuple2(\"LD_LIBRARY_PATH\", \"$PATH\")), sc)\n      runUserDefinedJob(\"\", \"method\", \"\", \"com.informatica.cci.runtime.adapterutils.CCITaskUtils\", \"invocationMethod\", List(\"posttask\", \"package-AmazonRedshiftV2.46000501.light.zip\", \"/package/redshift/thirdparty\"), List(params.extern(22)), Map(Tuple2(\"LD_LIBRARY_PATH\", \"$PATH\")), sc)\n      runUserDefinedJob(\"\", \"method\", \"\", \"com.informatica.cci.runtime.adapterutils.CCITaskUtils\", \"invocationMethod\", List(\"posttask\", \"package-AmazonRedshiftV2.46000501.light.zip\", \"/package/redshift/thirdparty\"), List(params.extern(23)), Map(Tuple2(\"LD_LIBRARY_PATH\", \"$PATH\")), sc)\n      runUserDefinedJob(\"\", \"method\", \"\", \"com.informatica.cci.runtime.adapterutils.CCITaskUtils\", \"invocationMethod\", List(\"posttask\", \"package-AmazonRedshiftV2.46000501.light.zip\", \"/package/redshift/thirdparty\"), List(params.extern(24)), Map(Tuple2(\"LD_LIBRARY_PATH\", \"$PATH\")), sc)\n      runUserDefinedJob(\"\", \"method\", \"\", \"com.informatica.cci.runtime.adapterutils.CCITaskUtils\", \"invocationMethod\", List(\"posttask\", \"package-AmazonRedshiftV2.46000501.light.zip\", \"/package/redshift/thirdparty\"), List(params.extern(25)), Map(Tuple2(\"LD_LIBRARY_PATH\", \"$PATH\")), sc)\n      runUserDefinedJob(\"\", \"method\", \"\", \"com.informatica.cci.runtime.adapterutils.CCITaskUtils\", \"invocationMethod\", List(\"posttask\", \"package-AmazonRedshiftV2.46000501.light.zip\", \"/package/redshift/thirdparty\"), List(params.extern(26)), Map(Tuple2(\"LD_LIBRARY_PATH\", \"$PATH\")), sc)\n      runUserDefinedJob(\"\", \"method\", \"\", \"com.informatica.cci.runtime.adapterutils.CCITaskUtils\", \"invocationMethod\", List(\"posttask\", \"package-AmazonRedshiftV2.46000501.light.zip\", \"/package/redshift/thirdparty\"), List(params.extern(27)), Map(Tuple2(\"LD_LIBRARY_PATH\", \"$PATH\")), sc)\n      runUserDefinedJob(\"\", \"method\", \"\", \"com.informatica.cci.runtime.adapterutils.CCITaskUtils\", \"invocationMethod\", List(\"posttask\", \"package-AmazonRedshiftV2.46000501.light.zip\", \"/package/redshift/thirdparty\"), List(params.extern(28)), Map(Tuple2(\"LD_LIBRARY_PATH\", \"$PATH\")), sc)\n      runUserDefinedJob(\"\", \"method\", \"\", \"com.informatica.cci.runtime.adapterutils.CCITaskUtils\", \"invocationMethod\", List(\"posttask\", \"package-AmazonRedshiftV2.46000501.light.zip\", \"/package/redshift/thirdparty\"), List(params.extern(29)), Map(Tuple2(\"LD_LIBRARY_PATH\", \"$PATH\")), sc)\n      runUserDefinedJob(\"\", \"method\", \"\", \"com.informatica.cci.runtime.adapterutils.CCITaskUtils\", \"invocationMethod\", List(\"posttask\", \"package-AmazonRedshiftV2.46000501.light.zip\", \"/package/redshift/thirdparty\"), List(params.extern(30)), Map(Tuple2(\"LD_LIBRARY_PATH\", \"$PATH\")), sc)\n      runUserDefinedJob(\"\", \"method\", \"\", \"com.informatica.cci.runtime.adapterutils.CCITaskUtils\", \"invocationMethod\", List(\"posttask\", \"package-AmazonRedshiftV2.46000501.light.zip\", \"/package/redshift/thirdparty\"), List(params.extern(31)), Map(Tuple2(\"LD_LIBRARY_PATH\", \"$PATH\")), sc)\n      runUserDefinedJob(\"\", \"method\", \"\", \"com.informatica.cci.runtime.adapterutils.CCITaskUtils\", \"invocationMethod\", List(\"posttask\", \"package-AmazonRedshiftV2.46000501.light.zip\", \"/package/redshift/thirdparty\"), List(params.extern(32)), Map(Tuple2(\"LD_LIBRARY_PATH\", \"$PATH\")), sc)\n      runUserDefinedJob(\"\", \"method\", \"\", \"com.informatica.cci.runtime.adapterutils.CCITaskUtils\", \"invocationMethod\", List(\"posttask\", \"package-AmazonRedshiftV2.46000501.light.zip\", \"/package/redshift/thirdparty\"), List(params.extern(33)), Map(Tuple2(\"LD_LIBRARY_PATH\", \"$PATH\")), sc)\n      runUserDefinedJob(\"\", \"method\", \"\", \"com.informatica.cci.runtime.adapterutils.CCITaskUtils\", \"invocationMethod\", List(\"posttask\", \"package-AmazonRedshiftV2.46000501.light.zip\", \"/package/redshift/thirdparty\"), List(params.extern(34)), Map(Tuple2(\"LD_LIBRARY_PATH\", \"$PATH\")), sc)\n      runUserDefinedJob(\"\", \"method\", \"\", \"com.informatica.cci.runtime.adapterutils.CCITaskUtils\", \"invocationMethod\", List(\"posttask\", \"package-AmazonRedshiftV2.46000501.light.zip\", \"/package/redshift/thirdparty\"), List(params.extern(35)), Map(Tuple2(\"LD_LIBRARY_PATH\", \"$PATH\")), sc)\n      runUserDefinedJob(\"\", \"method\", \"\", \"com.informatica.cci.runtime.adapterutils.CCITaskUtils\", \"invocationMethod\", List(\"posttask\", \"package-AmazonRedshiftV2.46000501.light.zip\", \"/package/redshift/thirdparty\"), List(params.extern(36)), Map(Tuple2(\"LD_LIBRARY_PATH\", \"$PATH\")), sc)\n      runUserDefinedJob(\"\", \"method\", \"\", \"com.informatica.cci.runtime.adapterutils.CCITaskUtils\", \"invocationMethod\", List(\"posttask\", \"package-AmazonRedshiftV2.46000501.light.zip\", \"/package/redshift/thirdparty\"), List(params.extern(37)), Map(Tuple2(\"LD_LIBRARY_PATH\", \"$PATH\")), sc)\n      runUserDefinedJob(\"\", \"method\", \"\", \"com.informatica.cci.runtime.adapterutils.CCITaskUtils\", \"invocationMethod\", List(\"posttask\", \"package-AmazonRedshiftV2.46000501.light.zip\", \"/package/redshift/thirdparty\"), List(params.extern(38)), Map(Tuple2(\"LD_LIBRARY_PATH\", \"$PATH\")), sc)\n      runUserDefinedJob(\"\", \"method\", \"\", \"com.informatica.cci.runtime.adapterutils.CCITaskUtils\", \"invocationMethod\", List(\"posttask\", \"package-AmazonRedshiftV2.46000501.light.zip\", \"/package/redshift/thirdparty\"), List(params.extern(39)), Map(Tuple2(\"LD_LIBRARY_PATH\", \"$PATH\")), sc)\n      runUserDefinedJob(\"\", \"method\", \"\", \"com.informatica.cci.runtime.adapterutils.CCITaskUtils\", \"invocationMethod\", List(\"posttask\", \"package-AmazonRedshiftV2.46000501.light.zip\", \"/package/redshift/thirdparty\"), List(params.extern(40)), Map(Tuple2(\"LD_LIBRARY_PATH\", \"$PATH\")), sc)\n    }\n    postJobs()\n\n    sc.stop\n  }\n}\n[0] -\u003e [EXP_xfmDeriveSk_Rtr0_MAPPING_648001021440783_648002427843659.bin]\n[1] -\u003e [/chef/target/01CAKB0E000000008T7G/sess407873628365942004/6480008182663833955205396506848974_udj]\n[2] -\u003e [/chef/target/01CAKB0E000000008T7G/sess407873628365942004/6480006927475515479607066832869442_udj]\n[3] -\u003e [/chef/target/01CAKB0E000000008T7G/sess407873628365942004/6480007718327732661567851817606537_udj]\n[4] -\u003e [/chef/target/01CAKB0E000000008T7G/sess407873628365942004/648000761103943157376585528518702_udj]\n[5] -\u003e [/chef/target/01CAKB0E000000008T7G/sess407873628365942004/6480006496513401303724593494164673_udj]\n[6] -\u003e [/chef/target/01CAKB0E000000008T7G/sess407873628365942004/6480006609788972603121378342945781_udj]\n[7] -\u003e [/chef/target/01CAKB0E000000008T7G/sess407873628365942004/6480006203839494108669525860801295_udj]\n[8] -\u003e [/chef/target/01CAKB0E000000008T7G/sess407873628365942004/6480007386844156877251857550577878_udj]\n[9] -\u003e [/chef/target/01CAKB0E000000008T7G/sess407873628365942004/6480007821986097571189760237823669_udj]\n[10] -\u003e [/chef/target/01CAKB0E000000008T7G/sess407873628365942004/6480006817583085811169938781698987_udj]\n[11] -\u003e [/chef/target/01CAKB0E000000008T7G/sess407873628365942004/6480007281573555163927785961249897_udj]\n[12] -\u003e [/chef/target/01CAKB0E000000008T7G/sess407873628365942004/6480006714287155949478878029716587_udj]\n[13] -\u003e [/chef/target/01CAKB0E000000008T7G/sess407873628365942004/6480008034975558744977461276643455_udj]\n[14] -\u003e [/chef/target/01CAKB0E000000008T7G/sess407873628365942004/6480006370776777075754526219017273_udj]\n[15] -\u003e [/chef/target/01CAKB0E000000008T7G/sess407873628365942004/6480007927350432802981836577246437_udj]\n[16] -\u003e [/chef/target/01CAKB0E000000008T7G/sess407873628365942004/6480007495208625672972654037436072_udj]\n[17] -\u003e [/chef/target/01CAKB0E000000008T7G/sess407873628365942004/6480007149033615326274133938672121_udj]\n[18] -\u003e [/chef/target/01CAKB0E000000008T7G/sess407873628365942004/6480009907032787276505498996044878_udj]\n[19] -\u003e [/chef/target/01CAKB0E000000008T7G/sess407873628365942004/648001087400881148352493158013256_udj]\n[20] -\u003e [/chef/target/01CAKB0E000000008T7G/sess407873628365942004/6480011731181117130079520197149100_udj]\n[21] -\u003e [/chef/target/01CAKB0E000000008T7G/sess407873628365942004/648000820816904318500589841345997_udj]\n[22] -\u003e [/chef/target/01CAKB0E000000008T7G/sess407873628365942004/6480006944863803053175686610752430_udj]\n[23] -\u003e [/chef/target/01CAKB0E000000008T7G/sess407873628365942004/6480007735065414919284858681141272_udj]\n[24] -\u003e [/chef/target/01CAKB0E000000008T7G/sess407873628365942004/6480007628379443513589685264192933_udj]\n[25] -\u003e [/chef/target/01CAKB0E000000008T7G/sess407873628365942004/6480006514402217942785329601241321_udj]\n[26] -\u003e [/chef/target/01CAKB0E000000008T7G/sess407873628365942004/6480006626762331559738688538681417_udj]\n[27] -\u003e [/chef/target/01CAKB0E000000008T7G/sess407873628365942004/6480006232100161872869312799975760_udj]\n[28] -\u003e [/chef/target/01CAKB0E000000008T7G/sess407873628365942004/648000740622757794720219778006156_udj]\n[29] -\u003e [/chef/target/01CAKB0E000000008T7G/sess407873628365942004/648000783810771182066692307893447_udj]\n[30] -\u003e [/chef/target/01CAKB0E000000008T7G/sess407873628365942004/6480006833183786966972755225122989_udj]\n[31] -\u003e [/chef/target/01CAKB0E000000008T7G/sess407873628365942004/6480007297349774062884566301786517_udj]\n[32] -\u003e [/chef/target/01CAKB0E000000008T7G/sess407873628365942004/6480006731014712300236888989940842_udj]\n[33] -\u003e [/chef/target/01CAKB0E000000008T7G/sess407873628365942004/6480008052045883442540985102186063_udj]\n[34] -\u003e [/chef/target/01CAKB0E000000008T7G/sess407873628365942004/6480006389074438201509934996574700_udj]\n[35] -\u003e [/chef/target/01CAKB0E000000008T7G/sess407873628365942004/6480007943653671404073061815446914_udj]\n[36] -\u003e [/chef/target/01CAKB0E000000008T7G/sess407873628365942004/6480007511364255657517471632401166_udj]\n[37] -\u003e [/chef/target/01CAKB0E000000008T7G/sess407873628365942004/6480007190776596445708393664042018_udj]\n[38] -\u003e [/chef/target/01CAKB0E000000008T7G/sess407873628365942004/6480009934578217389196935952986122_udj]\n[39] -\u003e [/chef/target/01CAKB0E000000008T7G/sess407873628365942004/6480010903224264468652590754680551_udj]\n[40] -\u003e [/chef/target/01CAKB0E000000008T7G/sess407873628365942004/648001178737093549903355732722241_udj]\n","dependencies":[]}]